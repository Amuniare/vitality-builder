=== Directory Tree ===
server/
  appsettings.Development.json
  appsettings.json
  controllers/
    CharactersController.cs
  Domain/
    DTOs/
      ArchetypesDto.cs
      CharacterDTOs.cs
      CombatAttributesDto.cs
      CreateCharacterDto.cs
      UtilityAttributesDto.cs
    Entities/
      ArchetypeEntity.cs
      CharacterEntity.cs
      CombatAttributesEntity.cs
      ExpertiseEntity.cs
      SpecialAttackEntity.cs
      UniquePowerEntity.cs
      UtilityAttributesEntity.cs
    Enums/
      ArchetypeEnums.cs
    Validations/
      ArchetypeValidators.cs
      CharacterValidators.cs
  Infrastructure/
    Database/
      EntityConfigurations/
      VitalityBuilderContext.cs
    Logging/
      LoggingConfiguration.cs
    Validation/
      ValidationExtensions.cs
  Interfaces/
    Repositories/
      ICharacterRepository.cs
    Services/
      ICalculationService.cs
      ICharacterArchetypesServices.cs
      ICharacterCreationService.cs
      ICharacterManagementService.cs
      ICharacterStatCalculator.cs
      ICombatService.cs
  migrations/
    20250209215104_InitialCreate.cs
    20250210120258_FixMainPointPoolComputed.cs
    20250210120258_FixMainPointPoolComputed.Designer.cs
    VitalityBuilderContextModelSnapshot.cs
  Program.cs
  Properties/
    launchSettings.json
  Utilities/
    Extensions/
      JsonValueConverter.cs
    Helpers/
      ValidationHelper.cs
  vitality.db
  VitalityBuilder.Api.csproj

=== File Contents ===

File: server\appsettings.Development.json
Content:
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}

--------------------------------------------------

File: server\appsettings.json
Content:
{
  "ConnectionStrings": {
    "DefaultConnection": "Server=localhost;Database=VitalityBuilder;Trusted_Connection=True;TrustServerCertificate=True;MultipleActiveResultSets=true"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}
--------------------------------------------------

File: server\Program.cs
Content:
using Microsoft.EntityFrameworkCore;
using Microsoft.OpenApi.Models;
using System.Text.Json.Serialization;
using VitalityBuilder.Api.Infrastructure; 
using VitalityBuilder.Api.Services;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddValidation();



// Configure JSON options
builder.Services.AddControllers()
    .AddJsonOptions(options =>
    {
        options.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles;
        options.JsonSerializerOptions.DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull;
    });

// Configure logging
builder.Services.AddLogging(logging =>
{
    logging.AddConsole();
    logging.AddDebug();
});

// Add database context
builder.Services.AddDbContext<VitalityBuilderContext>(options => 
{
    var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
    options.UseSqlServer(connectionString);
    // Add logging for development
    if (builder.Environment.IsDevelopment())
    {
        options.EnableSensitiveDataLogging();
        options.EnableDetailedErrors();
    }
});

// Add services
builder.Services.AddScoped<ICharacterArchetypesService, CharacterArchetypesService>();

// Add Swagger
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(options =>
{
    options.SwaggerDoc("v1", new OpenApiInfo
    {
        Version = "v1",
        Title = "Vitality System Character Builder API",
        Description = "An ASP.NET Core Web API for managing Vitality System character creation"
    });
});

var app = builder.Build();

// Configure middleware
app.UseSwagger();
app.UseSwaggerUI(options =>
{
    options.SwaggerEndpoint("/swagger/v1/swagger.json", "v1");
    options.RoutePrefix = string.Empty;
});

app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();

// Ensure database exists
using (var scope = app.Services.CreateScope())
{
    var context = scope.ServiceProvider.GetRequiredService<VitalityBuilderContext>();
    context.Database.EnsureCreated();
}

app.Run();
--------------------------------------------------

File: server\vitality.db
Content:
[Binary or non-UTF-8 file content omitted]
--------------------------------------------------

File: server\VitalityBuilder.Api.csproj
Content:
<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <NoWarn>$(NoWarn);1591</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="FluentValidation.AspNetCore" Version="11.3.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="9.0.1">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="9.0.1" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="7.2.0" />
  </ItemGroup>
</Project>
--------------------------------------------------

File: server\controllers\CharactersController.cs
Content:
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using FluentValidation;
using VitalityBuilder.Api.Models.DTOs;
using VitalityBuilder.Api.Models.Entities;
using VitalityBuilder.Api.Services;
using VitalityBuilder.Api.Infrastructure;


namespace VitalityBuilder.Api.Controllers;

[ApiController]
[Route("api/[controller]")]
public class CharactersController : ControllerBase
{
    private readonly VitalityBuilderContext _context;
    private readonly ILogger<CharactersController> _logger;
    private readonly ICharacterArchetypesService _archetypeService;
    private readonly IValidator<CreateCharacterDto> _createCharacterValidator;
    private readonly IValidator<CharacterArchetypesDto> _archetypesValidator;


    /// <summary>
    /// Creates a new character with basic attributes
    /// </summary>
    [HttpPost]
    public async Task<ActionResult<CharacterEntity>> CreateCharacter([FromBody] CreateCharacterDto dto)
    {
        _logger.LogInformation("Received character creation request for {CharacterName}", dto.Name);

        // Validate the DTO
        var validationResult = await _createCharacterValidator.ValidateAsync(dto);
        if (!validationResult.IsValid)
        {
            return BadRequest(validationResult.Errors);
        }

        try 
        {
            // Validate attribute points against tier limits
            if (!_validationService.IsValid(dto))
            {
                return BadRequest("Attribute points exceed tier limits");
            }

            var character = new CharacterEntity
            {
                Name = dto.Name,
                Tier = dto.Tier,
                CombatAttributes = new CombatAttributes
                {
                    Focus = dto.CombatAttributes.Focus,
                    Power = dto.CombatAttributes.Power,
                    Mobility = dto.CombatAttributes.Mobility,
                    Endurance = dto.CombatAttributes.Endurance,
                    Total = dto.CombatAttributes.Total
                },
                UtilityAttributes = new UtilityAttributes
                {
                    Awareness = dto.UtilityAttributes.Awareness,
                    Communication = dto.UtilityAttributes.Communication,
                    Intelligence = dto.UtilityAttributes.Intelligence
                }
            };

            _context.Add(character);
            await _context.SaveChangesAsync();

            return CreatedAtAction(nameof(GetCharacter), new { id = character.Id }, character);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error creating character {CharacterName}", dto.Name);
            return StatusCode(500, "An error occurred while creating the character");
        }
    }

    /// <summary>
    /// Updates the archetypes for an existing character
    /// </summary>
    [HttpPut("{id}/archetypes")]
    public async Task<IActionResult> UpdateArchetypes(int id, [FromBody] CharacterArchetypesDto dto)
    {
        var character = await _context.Characters
            .Include(c => c.CharacterArchetypes)
            .FirstOrDefaultAsync(c => c.Id == id);

        if (character == null) return NotFound();

        // Validate the archetypes DTO
        var validationResult = await _archetypesValidator.ValidateAsync(dto);
        if (!validationResult.IsValid)
        {
            return BadRequest(validationResult.Errors);
        }

        try
        {
            var archetypes = await _archetypeService.CreateArchetypesAsync(dto, character.Id);
            
            character.SpecialAttacksPointPool = _archetypeService.CalculateSpecialAttackPoints(
                archetypes.SpecialAttackArchetype, 
                character.Tier
            );
            
            character.UtilityPointPool = _archetypeService.CalculateUtilityPoints(
                archetypes.UtilityArchetype,
                character.Tier
            );

            await _context.SaveChangesAsync();
            return Ok(character);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error updating archetypes for character {CharacterId}", id);
            return StatusCode(500, "Error updating archetypes");
        }
    }

    /// <summary>
    /// Gets a character by ID including all related data
    /// </summary>
    [HttpGet("{id}")]
    public async Task<ActionResult<CharacterEntity>> GetCharacter(int id)
    {
        var character = await _context.Characters
            .Include(c => c.CombatAttributes)
            .Include(c => c.UtilityAttributes)
            .Include(c => c.Expertise)
            .Include(c => c.SpecialAttacks)
            .Include(c => c.UniquePowers)
            .FirstOrDefaultAsync(c => c.Id == id);

        if (character == null)
        {
            return NotFound();
        }

        return character;
    }

    private readonly ValidateAttributePointsService _validationService;
    public CharactersController(
        VitalityBuilderContext context,
        ILogger<CharactersController> logger,
        ICharacterArchetypesService archetypeService,
        IValidator<CreateCharacterDto> createCharacterValidator,
        IValidator<CharacterArchetypesDto> archetypesValidator,
        ValidateAttributePointsService validationService)
    {
        _context = context;
        _logger = logger;
        _archetypeService = archetypeService;
        _createCharacterValidator = createCharacterValidator;
        _archetypesValidator = archetypesValidator;
        _validationService = validationService;
    }


    
    

}

--------------------------------------------------

File: server\migrations\20250209215104_InitialCreate.cs
Content:
﻿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace VitalityBuilder.Api.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Characters",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Tier = table.Column<int>(type: "int", nullable: false),
                    MainPointPool = table.Column<int>(type: "int", nullable: false),
                    SpecialAttacksPointPool = table.Column<int>(type: "int", nullable: false),
                    UtilityPointPool = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Characters", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CharacterArchetypes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CharacterId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CharacterArchetypes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CharacterArchetypes_Characters_CharacterId",
                        column: x => x.CharacterId,
                        principalTable: "Characters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CombatAttributes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Focus = table.Column<int>(type: "int", nullable: false),
                    Power = table.Column<int>(type: "int", nullable: false),
                    Mobility = table.Column<int>(type: "int", nullable: false),
                    Endurance = table.Column<int>(type: "int", nullable: false),
                    CharacterId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CombatAttributes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CombatAttributes_Characters_CharacterId",
                        column: x => x.CharacterId,
                        principalTable: "Characters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Expertise",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Category = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Cost = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CharacterId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Expertise", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Expertise_Characters_CharacterId",
                        column: x => x.CharacterId,
                        principalTable: "Characters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "SpecialAttacks",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AttackType = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EffectType = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Limits = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Upgrades = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CharacterId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SpecialAttacks", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SpecialAttacks_Characters_CharacterId",
                        column: x => x.CharacterId,
                        principalTable: "Characters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UniquePowers",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Category = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Cost = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CharacterId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UniquePowers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UniquePowers_Characters_CharacterId",
                        column: x => x.CharacterId,
                        principalTable: "Characters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UtilityAttributes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Awareness = table.Column<int>(type: "int", nullable: false),
                    Communication = table.Column<int>(type: "int", nullable: false),
                    Intelligence = table.Column<int>(type: "int", nullable: false),
                    CharacterId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UtilityAttributes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UtilityAttributes_Characters_CharacterId",
                        column: x => x.CharacterId,
                        principalTable: "Characters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AttackTypeArchetype",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Category = table.Column<int>(type: "int", nullable: false),
                    AccuracyPenalty = table.Column<int>(type: "int", nullable: false),
                    EffectPenalty = table.Column<int>(type: "int", nullable: false),
                    BypassesAccuracyChecks = table.Column<bool>(type: "bit", nullable: false),
                    HasFreeAOE = table.Column<bool>(type: "bit", nullable: false),
                    CharacterArchetypesId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AttackTypeArchetype", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AttackTypeArchetype_CharacterArchetypes_CharacterArchetypesId",
                        column: x => x.CharacterArchetypesId,
                        principalTable: "CharacterArchetypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "EffectTypeArchetype",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Category = table.Column<int>(type: "int", nullable: false),
                    HasAccessToAdvancedConditions = table.Column<bool>(type: "bit", nullable: false),
                    DamagePenalty = table.Column<int>(type: "int", nullable: false),
                    ConditionPenalty = table.Column<int>(type: "int", nullable: false),
                    RequiresHybridEffects = table.Column<bool>(type: "bit", nullable: false),
                    CharacterArchetypesId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EffectTypeArchetype", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EffectTypeArchetype_CharacterArchetypes_CharacterArchetypesId",
                        column: x => x.CharacterArchetypesId,
                        principalTable: "CharacterArchetypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MovementArchetype",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Type = table.Column<int>(type: "int", nullable: false),
                    SpeedBonusByTier = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IgnoresOpportunityAttacks = table.Column<bool>(type: "bit", nullable: false),
                    IgnoresDifficultTerrain = table.Column<bool>(type: "bit", nullable: false),
                    IsImmuneToProne = table.Column<bool>(type: "bit", nullable: false),
                    MovementMultiplier = table.Column<float>(type: "real", nullable: false),
                    CharacterArchetypesId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MovementArchetype", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MovementArchetype_CharacterArchetypes_CharacterArchetypesId",
                        column: x => x.CharacterArchetypesId,
                        principalTable: "CharacterArchetypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "SpecialAttackArchetype",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Category = table.Column<int>(type: "int", nullable: false),
                    BasePoints = table.Column<int>(type: "int", nullable: false),
                    MaxSpecialAttacks = table.Column<int>(type: "int", nullable: false),
                    LimitPointMultiplier = table.Column<float>(type: "real", nullable: false),
                    CanTakeLimits = table.Column<bool>(type: "bit", nullable: false),
                    RequiredLimits = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CharacterArchetypesId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SpecialAttackArchetype", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SpecialAttackArchetype_CharacterArchetypes_CharacterArchetypesId",
                        column: x => x.CharacterArchetypesId,
                        principalTable: "CharacterArchetypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UniqueAbilityArchetype",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Category = table.Column<int>(type: "int", nullable: false),
                    ExtraQuickActions = table.Column<int>(type: "int", nullable: false),
                    ExtraPointPool = table.Column<int>(type: "int", nullable: false),
                    StatBonuses = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CharacterArchetypesId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UniqueAbilityArchetype", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UniqueAbilityArchetype_CharacterArchetypes_CharacterArchetypesId",
                        column: x => x.CharacterArchetypesId,
                        principalTable: "CharacterArchetypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UtilityArchetype",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Category = table.Column<int>(type: "int", nullable: false),
                    BaseUtilityPool = table.Column<int>(type: "int", nullable: false),
                    CanPurchaseExpertise = table.Column<bool>(type: "bit", nullable: false),
                    TierBonusMultiplier = table.Column<float>(type: "real", nullable: false),
                    Restrictions = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CharacterArchetypesId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UtilityArchetype", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UtilityArchetype_CharacterArchetypes_CharacterArchetypesId",
                        column: x => x.CharacterArchetypesId,
                        principalTable: "CharacterArchetypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_AttackTypeArchetype_CharacterArchetypesId",
                table: "AttackTypeArchetype",
                column: "CharacterArchetypesId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_CharacterArchetypes_CharacterId",
                table: "CharacterArchetypes",
                column: "CharacterId");

            migrationBuilder.CreateIndex(
                name: "IX_CombatAttributes_CharacterId",
                table: "CombatAttributes",
                column: "CharacterId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_EffectTypeArchetype_CharacterArchetypesId",
                table: "EffectTypeArchetype",
                column: "CharacterArchetypesId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Expertise_CharacterId",
                table: "Expertise",
                column: "CharacterId");

            migrationBuilder.CreateIndex(
                name: "IX_MovementArchetype_CharacterArchetypesId",
                table: "MovementArchetype",
                column: "CharacterArchetypesId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_SpecialAttackArchetype_CharacterArchetypesId",
                table: "SpecialAttackArchetype",
                column: "CharacterArchetypesId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_SpecialAttacks_CharacterId",
                table: "SpecialAttacks",
                column: "CharacterId");

            migrationBuilder.CreateIndex(
                name: "IX_UniqueAbilityArchetype_CharacterArchetypesId",
                table: "UniqueAbilityArchetype",
                column: "CharacterArchetypesId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_UniquePowers_CharacterId",
                table: "UniquePowers",
                column: "CharacterId");

            migrationBuilder.CreateIndex(
                name: "IX_UtilityArchetype_CharacterArchetypesId",
                table: "UtilityArchetype",
                column: "CharacterArchetypesId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_UtilityAttributes_CharacterId",
                table: "UtilityAttributes",
                column: "CharacterId",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "AttackTypeArchetype");

            migrationBuilder.DropTable(
                name: "CombatAttributes");

            migrationBuilder.DropTable(
                name: "EffectTypeArchetype");

            migrationBuilder.DropTable(
                name: "Expertise");

            migrationBuilder.DropTable(
                name: "MovementArchetype");

            migrationBuilder.DropTable(
                name: "SpecialAttackArchetype");

            migrationBuilder.DropTable(
                name: "SpecialAttacks");

            migrationBuilder.DropTable(
                name: "UniqueAbilityArchetype");

            migrationBuilder.DropTable(
                name: "UniquePowers");

            migrationBuilder.DropTable(
                name: "UtilityArchetype");

            migrationBuilder.DropTable(
                name: "UtilityAttributes");

            migrationBuilder.DropTable(
                name: "CharacterArchetypes");

            migrationBuilder.DropTable(
                name: "Characters");
        }
    }
}

--------------------------------------------------

File: server\migrations\20250210120258_FixMainPointPoolComputed.cs
Content:
﻿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace VitalityBuilder.Api.Migrations
{
    /// <inheritdoc />
    public partial class FixMainPointPoolComputed : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropIndex(
                name: "IX_CharacterArchetypes_CharacterId",
                table: "CharacterArchetypes");

            migrationBuilder.AddColumn<int>(
                name: "Cost",
                table: "SpecialAttacks",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.AddColumn<int>(
                name: "Total",
                table: "CombatAttributes",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.AlterColumn<int>(
                name: "MainPointPool",
                table: "Characters",
                type: "int",
                nullable: false,
                computedColumnSql: "CASE WHEN [Tier] >= 2 THEN ([Tier] - 2) * 15 ELSE 0 END",
                oldClrType: typeof(int),
                oldType: "int");

            migrationBuilder.CreateIndex(
                name: "IX_CharacterArchetypes_CharacterId",
                table: "CharacterArchetypes",
                column: "CharacterId",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropIndex(
                name: "IX_CharacterArchetypes_CharacterId",
                table: "CharacterArchetypes");

            migrationBuilder.DropColumn(
                name: "Cost",
                table: "SpecialAttacks");

            migrationBuilder.DropColumn(
                name: "Total",
                table: "CombatAttributes");

            migrationBuilder.AlterColumn<int>(
                name: "MainPointPool",
                table: "Characters",
                type: "int",
                nullable: false,
                oldClrType: typeof(int),
                oldType: "int",
                oldComputedColumnSql: "CASE WHEN [Tier] >= 2 THEN ([Tier] - 2) * 15 ELSE 0 END");

            migrationBuilder.CreateIndex(
                name: "IX_CharacterArchetypes_CharacterId",
                table: "CharacterArchetypes",
                column: "CharacterId");
        }
    }
}

--------------------------------------------------

File: server\migrations\20250210120258_FixMainPointPoolComputed.Designer.cs
Content:
﻿// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VitalityBuilder.Api.Infrastructure;

#nullable disable

namespace VitalityBuilder.Api.Migrations
{
    [DbContext(typeof(VitalityBuilderContext))]
    [Migration("20250210120258_FixMainPointPoolComputed")]
    partial class FixMainPointPoolComputed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.AttackTypeArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccuracyPenalty")
                        .HasColumnType("int");

                    b.Property<bool>("BypassesAccuracyChecks")
                        .HasColumnType("bit");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<int>("EffectPenalty")
                        .HasColumnType("int");

                    b.Property<bool>("HasFreeAOE")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("AttackTypeArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.EffectTypeArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<int>("ConditionPenalty")
                        .HasColumnType("int");

                    b.Property<int>("DamagePenalty")
                        .HasColumnType("int");

                    b.Property<bool>("HasAccessToAdvancedConditions")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresHybridEffects")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("EffectTypeArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.MovementArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<bool>("IgnoresDifficultTerrain")
                        .HasColumnType("bit");

                    b.Property<bool>("IgnoresOpportunityAttacks")
                        .HasColumnType("bit");

                    b.Property<bool>("IsImmuneToProne")
                        .HasColumnType("bit");

                    b.Property<float>("MovementMultiplier")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpeedBonusByTier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("MovementArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.SpecialAttackArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BasePoints")
                        .HasColumnType("int");

                    b.Property<bool>("CanTakeLimits")
                        .HasColumnType("bit");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<float>("LimitPointMultiplier")
                        .HasColumnType("real");

                    b.Property<int>("MaxSpecialAttacks")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("RequiredLimits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("SpecialAttackArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.UniqueAbilityArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<int>("ExtraPointPool")
                        .HasColumnType("int");

                    b.Property<int>("ExtraQuickActions")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatBonuses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("UniqueAbilityArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.UtilityArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseUtilityPool")
                        .HasColumnType("int");

                    b.Property<bool>("CanPurchaseExpertise")
                        .HasColumnType("bit");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Restrictions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TierBonusMultiplier")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("UtilityArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Entities.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MainPointPool")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("CASE WHEN [Tier] >= 2 THEN ([Tier] - 2) * 15 ELSE 0 END");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecialAttacksPointPool")
                        .HasColumnType("int");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.Property<int>("UtilityPointPool")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Entities.CombatAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Endurance")
                        .HasColumnType("int");

                    b.Property<int>("Focus")
                        .HasColumnType("int");

                    b.Property<int>("Mobility")
                        .HasColumnType("int");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("CombatAttributes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Entities.Expertise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Expertise");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Entities.SpecialAttack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttackType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("EffectType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Limits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Upgrades")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("SpecialAttacks");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Entities.UniquePower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("UniquePowers");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Entities.UtilityAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Awareness")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Communication")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("UtilityAttributes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.AttackTypeArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("AttackTypeArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.AttackTypeArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Entities.Character", "Character")
                        .WithOne("CharacterArchetypes")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.EffectTypeArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("EffectTypeArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.EffectTypeArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.MovementArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("MovementArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.MovementArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.SpecialAttackArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("SpecialAttackArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.SpecialAttackArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.UniqueAbilityArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("UniqueAbilityArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.UniqueAbilityArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.UtilityArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("UtilityArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.UtilityArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Entities.CombatAttributes", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Entities.Character", "Character")
                        .WithOne("CombatAttributes")
                        .HasForeignKey("VitalityBuilder.Api.Models.Entities.CombatAttributes", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Entities.Expertise", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Entities.Character", "Character")
                        .WithMany("Expertise")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Entities.SpecialAttack", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Entities.Character", "Character")
                        .WithMany("SpecialAttacks")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Entities.UniquePower", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Entities.Character", "Character")
                        .WithMany("UniquePowers")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Entities.UtilityAttributes", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Entities.Character", "Character")
                        .WithOne("UtilityAttributes")
                        .HasForeignKey("VitalityBuilder.Api.Models.Entities.UtilityAttributes", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", b =>
                {
                    b.Navigation("AttackTypeArchetype")
                        .IsRequired();

                    b.Navigation("EffectTypeArchetype")
                        .IsRequired();

                    b.Navigation("MovementArchetype")
                        .IsRequired();

                    b.Navigation("SpecialAttackArchetype")
                        .IsRequired();

                    b.Navigation("UniqueAbilityArchetype")
                        .IsRequired();

                    b.Navigation("UtilityArchetype")
                        .IsRequired();
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Entities.Character", b =>
                {
                    b.Navigation("CharacterArchetypes");

                    b.Navigation("CombatAttributes");

                    b.Navigation("Expertise");

                    b.Navigation("SpecialAttacks");

                    b.Navigation("UniquePowers");

                    b.Navigation("UtilityAttributes");
                });
#pragma warning restore 612, 618
        }
    }
}

--------------------------------------------------

File: server\migrations\VitalityBuilderContextModelSnapshot.cs
Content:
﻿// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VitalityBuilder.Api.Infrastructure;

#nullable disable

namespace VitalityBuilder.Api.Migrations
{
    [DbContext(typeof(VitalityBuilderContext))]
    partial class VitalityBuilderContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.AttackTypeArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccuracyPenalty")
                        .HasColumnType("int");

                    b.Property<bool>("BypassesAccuracyChecks")
                        .HasColumnType("bit");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<int>("EffectPenalty")
                        .HasColumnType("int");

                    b.Property<bool>("HasFreeAOE")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("AttackTypeArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.EffectTypeArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<int>("ConditionPenalty")
                        .HasColumnType("int");

                    b.Property<int>("DamagePenalty")
                        .HasColumnType("int");

                    b.Property<bool>("HasAccessToAdvancedConditions")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresHybridEffects")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("EffectTypeArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.MovementArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<bool>("IgnoresDifficultTerrain")
                        .HasColumnType("bit");

                    b.Property<bool>("IgnoresOpportunityAttacks")
                        .HasColumnType("bit");

                    b.Property<bool>("IsImmuneToProne")
                        .HasColumnType("bit");

                    b.Property<float>("MovementMultiplier")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpeedBonusByTier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("MovementArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.SpecialAttackArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BasePoints")
                        .HasColumnType("int");

                    b.Property<bool>("CanTakeLimits")
                        .HasColumnType("bit");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<float>("LimitPointMultiplier")
                        .HasColumnType("real");

                    b.Property<int>("MaxSpecialAttacks")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("RequiredLimits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("SpecialAttackArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.UniqueAbilityArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<int>("ExtraPointPool")
                        .HasColumnType("int");

                    b.Property<int>("ExtraQuickActions")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatBonuses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("UniqueAbilityArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.UtilityArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseUtilityPool")
                        .HasColumnType("int");

                    b.Property<bool>("CanPurchaseExpertise")
                        .HasColumnType("bit");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Restrictions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TierBonusMultiplier")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("UtilityArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Entities.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MainPointPool")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("CASE WHEN [Tier] >= 2 THEN ([Tier] - 2) * 15 ELSE 0 END");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecialAttacksPointPool")
                        .HasColumnType("int");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.Property<int>("UtilityPointPool")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Entities.CombatAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Endurance")
                        .HasColumnType("int");

                    b.Property<int>("Focus")
                        .HasColumnType("int");

                    b.Property<int>("Mobility")
                        .HasColumnType("int");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("CombatAttributes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Entities.Expertise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Expertise");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Entities.SpecialAttack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttackType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("EffectType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Limits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Upgrades")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("SpecialAttacks");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Entities.UniquePower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("UniquePowers");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Entities.UtilityAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Awareness")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Communication")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("UtilityAttributes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.AttackTypeArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("AttackTypeArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.AttackTypeArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Entities.Character", "Character")
                        .WithOne("CharacterArchetypes")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.EffectTypeArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("EffectTypeArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.EffectTypeArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.MovementArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("MovementArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.MovementArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.SpecialAttackArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("SpecialAttackArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.SpecialAttackArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.UniqueAbilityArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("UniqueAbilityArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.UniqueAbilityArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.UtilityArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("UtilityArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.UtilityArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Entities.CombatAttributes", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Entities.Character", "Character")
                        .WithOne("CombatAttributes")
                        .HasForeignKey("VitalityBuilder.Api.Models.Entities.CombatAttributes", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Entities.Expertise", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Entities.Character", "Character")
                        .WithMany("Expertise")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Entities.SpecialAttack", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Entities.Character", "Character")
                        .WithMany("SpecialAttacks")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Entities.UniquePower", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Entities.Character", "Character")
                        .WithMany("UniquePowers")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Entities.UtilityAttributes", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Entities.Character", "Character")
                        .WithOne("UtilityAttributes")
                        .HasForeignKey("VitalityBuilder.Api.Models.Entities.UtilityAttributes", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", b =>
                {
                    b.Navigation("AttackTypeArchetype")
                        .IsRequired();

                    b.Navigation("EffectTypeArchetype")
                        .IsRequired();

                    b.Navigation("MovementArchetype")
                        .IsRequired();

                    b.Navigation("SpecialAttackArchetype")
                        .IsRequired();

                    b.Navigation("UniqueAbilityArchetype")
                        .IsRequired();

                    b.Navigation("UtilityArchetype")
                        .IsRequired();
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Entities.Character", b =>
                {
                    b.Navigation("CharacterArchetypes");

                    b.Navigation("CombatAttributes");

                    b.Navigation("Expertise");

                    b.Navigation("SpecialAttacks");

                    b.Navigation("UniquePowers");

                    b.Navigation("UtilityAttributes");
                });
#pragma warning restore 612, 618
        }
    }
}

--------------------------------------------------

File: server\Properties\launchSettings.json
Content:
﻿{
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "swagger",
      "applicationUrl": "http://localhost:5034",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}
--------------------------------------------------

File: server\Utilities\Extensions\JsonValueConverter.cs
Content:
using System.Text.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Microsoft.EntityFrameworkCore.ChangeTracking;

namespace VitalityBuilder.Api.Infrastructure;

/// <summary>
/// Generic JSON value converter for Entity Framework Core
/// </summary>
public class JsonValueConverter<T> : ValueConverter<T, string> where T : class
{
    public JsonValueConverter() : base(
        // Serialize to JSON string
        v => JsonSerializer.Serialize(v, JsonSerializerOptions.Default),
        // Deserialize from JSON string with null handling
        v => v == null ? null! : JsonSerializer.Deserialize<T>(v, JsonSerializerOptions.Default)!
    )
    {
    }
}

/// <summary>
/// Generic JSON comparer for Entity Framework Core
/// </summary>
public class JsonValueComparer<T> : ValueComparer<T> where T : class
{
    private static bool EqualsJson(T? left, T? right)
    {
        if (left == null && right == null)
            return true;
        if (left == null || right == null)
            return false;
        return JsonSerializer.Serialize(left) == JsonSerializer.Serialize(right);
    }

    private static int GetHashCodeJson(T value)
    {
        if (value == null)
            return 0;
        return JsonSerializer.Serialize(value).GetHashCode();
    }

    private static T GetSnapshotJson(T value)
    {
        if (value == null)
            return null!;
        var json = JsonSerializer.Serialize(value);
        return JsonSerializer.Deserialize<T>(json)!;
    }

    public JsonValueComparer() : base(
        (l, r) => EqualsJson(l, r),
        v => GetHashCodeJson(v),
        v => GetSnapshotJson(v))
    {
    }
}
--------------------------------------------------

File: server\Utilities\Helpers\ValidationHelper.cs
Content:

--------------------------------------------------

File: server\Interfaces\Repositories\ICharacterRepository.cs
Content:
using VitalityBuilder.Api.Models.Entities;
public interface ICharacterRepository
{
    Task<Character> CreateCharacterAsync(Character character);
    Task<List<Character>> GetAllCharactersAsync();
    Task<Character?> GetCharacterByIdAsync(int id);
}
--------------------------------------------------

File: server\Interfaces\Services\ICalculationService.cs
Content:

--------------------------------------------------

File: server\Interfaces\Services\ICharacterArchetypesServices.cs
Content:
using VitalityBuilder.Api.Models;
using VitalityBuilder.Api.Models.Archetypes;
using VitalityBuilder.Api.Models.DTOs;

namespace VitalityBuilder.Api.Services;

/// <summary>
/// Interface defining core character archetype management operations
/// </summary>
public interface ICharacterArchetypesService
{
    Task<Models.Archetypes.CharacterArchetypes> CreateArchetypesAsync(CharacterArchetypesDto dto, int characterId);
    int CalculateMovementSpeed(Models.Archetypes.MovementArchetype archetype, int tier, int mobility);
    int CalculateSpecialAttackPoints(Models.Archetypes.SpecialAttackArchetype archetype, int tier);
    int CalculateUtilityPoints(Models.Archetypes.UtilityArchetype archetype, int tier);
    Dictionary<string, int> CalculateArchetypeBonuses(Models.Archetypes.CharacterArchetypes archetypes, int tier);
}

--------------------------------------------------

File: server\Interfaces\Services\ICharacterCreationService.cs
Content:

--------------------------------------------------

File: server\Interfaces\Services\ICharacterManagementService.cs
Content:

--------------------------------------------------

File: server\Interfaces\Services\ICharacterStatCalculator.cs
Content:

--------------------------------------------------

File: server\Interfaces\Services\ICombatService.cs
Content:

--------------------------------------------------

File: server\Infrastructure\Database\VitalityBuilderContext.cs
Content:
using Microsoft.EntityFrameworkCore;
using VitalityBuilder.Api.Models.Entities;
using VitalityBuilder.Api.Models.Archetypes;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using System.Text.Json;

namespace VitalityBuilder.Api.Infrastructure;

public class VitalityBuilderContext(DbContextOptions<VitalityBuilderContext> options) : DbContext(options)
{
    // Use fully qualified names to resolve ambiguity
    public DbSet<Models.Archetypes.CharacterArchetypes> CharacterArchetypes => Set<Models.Archetypes.CharacterArchetypes>();
    public DbSet<CharacterEntity> Characters => Set<CharacterEntity>();
    public DbSet<CombatAttributes> CombatAttributes => Set<CombatAttributes>();
    public DbSet<UtilityAttributes> UtilityAttributes => Set<UtilityAttributes>();
    public DbSet<Expertise> Expertise => Set<Expertise>();
    public DbSet<SpecialAttack> SpecialAttacks => Set<SpecialAttack>();
    public DbSet<UniquePower> UniquePowers => Set<UniquePower>();

    
    /// <summary>
    /// Database set for character archetypes and their associated components
    /// </summary>
    public DbSet<CharacterArchetypes> CharacterArchetypesEntity => Set<CharacterArchetypes>();

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        ConfigureCharacterArchetypes(modelBuilder);
        ConfigureMovementArchetype(modelBuilder);
        ConfigureAttackTypeArchetype(modelBuilder);
        ConfigureEffectTypeArchetype(modelBuilder);
        ConfigureUniqueAbilityArchetype(modelBuilder);
        ConfigureSpecialAttackArchetype(modelBuilder);
        ConfigureUtilityArchetype(modelBuilder);
    }

    private void ConfigureCharacterArchetypes(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<CharacterArchetypes>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Id).ValueGeneratedOnAdd();

            // Configure one-to-one relationship with Character
            entity.HasOne(e => e.Character)
                .WithOne()
                .HasForeignKey<CharacterArchetypes>(e => e.CharacterId)
                .OnDelete(DeleteBehavior.Cascade);

            // Configure required navigation properties
            entity.Navigation(e => e.MovementArchetype).IsRequired();
            entity.Navigation(e => e.AttackTypeArchetype).IsRequired();
            entity.Navigation(e => e.EffectTypeArchetype).IsRequired();
            entity.Navigation(e => e.UniqueAbilityArchetype).IsRequired();
            entity.Navigation(e => e.SpecialAttackArchetype).IsRequired();
            entity.Navigation(e => e.UtilityArchetype).IsRequired();

            // Configure table name
            entity.ToTable("CharacterArchetypes");
        });
    }

    private void ConfigureMovementArchetype(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<MovementArchetype>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Id).ValueGeneratedOnAdd();

            entity.Property(e => e.SpeedBonusByTier)
                .HasConversion(
                    v => JsonSerializer.Serialize(v, JsonSerializerOptions.Default),
                    v => JsonSerializer.Deserialize<Dictionary<int, int>>(v, JsonSerializerOptions.Default)
                         ?? new Dictionary<int, int>(),
                    new ValueComparer<Dictionary<int, int>>(
                        (c1, c2) => c1!.SequenceEqual(c2!),
                        c => c.Aggregate(0, (a, v) => HashCode.Combine(a, v.GetHashCode())),
                        c => new Dictionary<int, int>(c)
                    )
                );

            entity.Property(e => e.Type)
                .HasConversion<string>();

            entity.ToTable("MovementArchetypes");
        });
    }

    private void ConfigureAttackTypeArchetype(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AttackTypeArchetype>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Id).ValueGeneratedOnAdd();

            entity.Property(e => e.Category)
                .HasConversion<string>();

            entity.ToTable("AttackTypeArchetypes");
        });
    }

    private void ConfigureEffectTypeArchetype(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<EffectTypeArchetype>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Id).ValueGeneratedOnAdd();

            entity.Property(e => e.Category)
                .HasConversion<string>();

            entity.ToTable("EffectTypeArchetypes");
        });
    }

    private void ConfigureUniqueAbilityArchetype(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<UniqueAbilityArchetype>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Id).ValueGeneratedOnAdd();

            entity.Property(e => e.StatBonuses)
                .HasConversion(
                    v => JsonSerializer.Serialize(v, JsonSerializerOptions.Default),
                    v => JsonSerializer.Deserialize<Dictionary<string, int>>(v, JsonSerializerOptions.Default)
                         ?? new Dictionary<string, int>(),
                    new ValueComparer<Dictionary<string, int>>(
                        (c1, c2) => c1!.SequenceEqual(c2!),
                        c => c.Aggregate(0, (a, v) => HashCode.Combine(a, v.GetHashCode())),
                        c => new Dictionary<string, int>(c)
                    )
                );

            entity.Property(e => e.Category)
                .HasConversion<string>();

            entity.ToTable("UniqueAbilityArchetypes");
        });
    }

    private void ConfigureSpecialAttackArchetype(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<SpecialAttackArchetype>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Id).ValueGeneratedOnAdd();

            entity.Property(e => e.RequiredLimits)
                .HasConversion(
                    v => JsonSerializer.Serialize(v, JsonSerializerOptions.Default),
                    v => JsonSerializer.Deserialize<List<string>>(v, JsonSerializerOptions.Default)
                         ?? new List<string>(),
                    new ValueComparer<List<string>>(
                        (c1, c2) => c1!.SequenceEqual(c2!),
                        c => c.Aggregate(0, (a, v) => HashCode.Combine(a, v.GetHashCode())),
                        c => new List<string>(c)
                    )
                );

            entity.Property(e => e.Category)
                .HasConversion<string>();

            entity.ToTable("SpecialAttackArchetypes");
        });
    }

    private void ConfigureUtilityArchetype(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<UtilityArchetype>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Id).ValueGeneratedOnAdd();

            entity.Property(e => e.Restrictions)
                .HasConversion(
                    v => JsonSerializer.Serialize(v, JsonSerializerOptions.Default),
                    v => JsonSerializer.Deserialize<List<string>>(v, JsonSerializerOptions.Default)
                         ?? new List<string>(),
                    new ValueComparer<List<string>>(
                        (c1, c2) => c1!.SequenceEqual(c2!),
                        c => c.Aggregate(0, (a, v) => HashCode.Combine(a, v.GetHashCode())),
                        c => new List<string>(c)
                    )
                );

            entity.Property(e => e.Category)
                .HasConversion<string>();

            entity.ToTable("UtilityArchetypes");
        });
    }
}

--------------------------------------------------

File: server\Infrastructure\Logging\LoggingConfiguration.cs
Content:

--------------------------------------------------

File: server\Infrastructure\Validation\ValidationExtensions.cs
Content:
using FluentValidation;
using FluentValidation.AspNetCore;
using Microsoft.Extensions.DependencyInjection;
using VitalityBuilder.Api.Models.DTOs;
using VitalityBuilder.Api.Models.Validations;

namespace VitalityBuilder.Api.Infrastructure;

/// <summary>
/// Extension methods for registering validation services
/// </summary>
public static class ValidationExtensions
{
    public static IServiceCollection AddValidation(this IServiceCollection services)
    {
        // Register core character validators
        services.AddScoped<IValidator<CreateCharacterDto>, CreateCharacterDtoValidator>();
        services.AddScoped<IValidator<CombatAttributesDto>, CombatAttributesDtoValidator>();
        services.AddScoped<IValidator<UtilityAttributesDto>, UtilityAttributesDtoValidator>();

        // Register archetype validators
        services.AddScoped<IValidator<CharacterArchetypesDto>, CharacterArchetypesDtoValidator>();
        services.AddScoped<IValidator<MovementArchetypeDto>, MovementArchetypeDtoValidator>();
        services.AddScoped<IValidator<AttackTypeArchetypeDto>, AttackTypeArchetypeDtoValidator>();
        services.AddScoped<IValidator<EffectTypeArchetypeDto>, EffectTypeArchetypeDtoValidator>();
        services.AddScoped<IValidator<UniqueAbilityArchetypeDto>, UniqueAbilityArchetypeDtoValidator>();
        services.AddScoped<IValidator<SpecialAttackArchetypeDto>, SpecialAttackArchetypeDtoValidator>();
        services.AddScoped<IValidator<UtilityArchetypeDto>, UtilityArchetypeDtoValidator>();

        // Register FluentValidation
        services.AddFluentValidationAutoValidation();

        return services;
    }
}
--------------------------------------------------

File: server\Domain\DTOs\ArchetypesDto.cs
Content:
using VitalityBuilder.Api.Models.Enums;

namespace VitalityBuilder.Api.Models.DTOs;


public class CharacterArchetypesDto
{
    public MovementArchetypeDto MovementArchetype { get; set; } = null!;
    public AttackTypeArchetypeDto AttackTypeArchetype { get; set; } = null!;
    public EffectTypeArchetypeDto EffectTypeArchetype { get; set; } = null!;
    public UniqueAbilityArchetypeDto UniqueAbilityArchetype { get; set; } = null!;
    public SpecialAttackArchetypeDto SpecialAttackArchetype { get; set; } = null!;
    public UtilityArchetypeDto UtilityArchetype { get; set; } = null!;
}

public class MovementArchetypeDto
{
    public string Name { get; set; } = string.Empty;
    public MovementArchetypeType Type { get; set; }
    public Dictionary<int, int> SpeedBonusByTier { get; set; } = new();
    public bool IgnoresOpportunityAttacks { get; set; }
    public bool IgnoresDifficultTerrain { get; set; }
    public bool IsImmuneToProne { get; set; }
    public float MovementMultiplier { get; set; } = 1.0f;
}

public class AttackTypeArchetypeDto
{
    public string Name { get; set; } = string.Empty;
    public AttackTypeArchetypeCategory Category { get; set; }
    public int AccuracyPenalty { get; set; }
    public int EffectPenalty { get; set; }
    public bool BypassesAccuracyChecks { get; set; }
    public bool HasFreeAOE { get; set; }
}

public class EffectTypeArchetypeDto
{
    public string Name { get; set; } = string.Empty;
    public EffectTypeCategory Category { get; set; }
    public bool HasAccessToAdvancedConditions { get; set; }
    public int DamagePenalty { get; set; }
    public int ConditionPenalty { get; set; }
    public bool RequiresHybridEffects { get; set; }
}

public class UniqueAbilityArchetypeDto
{
    public string Name { get; set; } = string.Empty;
    public UniqueAbilityCategory Category { get; set; }
    public int ExtraQuickActions { get; set; }
    public int ExtraPointPool { get; set; }
    public Dictionary<string, int> StatBonuses { get; set; } = new();
}

public class SpecialAttackArchetypeDto
{
    public string Name { get; set; } = string.Empty;
    public SpecialAttackCategory Category { get; set; }
    public int BasePoints { get; set; }
    public int MaxSpecialAttacks { get; set; }
    public float LimitPointMultiplier { get; set; }
    public bool CanTakeLimits { get; set; }
    public List<string> RequiredLimits { get; set; } = new();
}

public class UtilityArchetypeDto
{
    public string Name { get; set; } = string.Empty;
    public UtilityCategory Category { get; set; }
    public int BaseUtilityPool { get; set; }
    public bool CanPurchaseExpertise { get; set; }
    public float TierBonusMultiplier { get; set; }
    public List<string> Restrictions { get; set; } = new();
}
--------------------------------------------------

File: server\Domain\DTOs\CharacterDTOs.cs
Content:
namespace VitalityBuilder.Api.Models.DTOs
    {

        public class CharacterResponseDto
        {
            public int Id { get; set; }
            public string Name { get; set; } = string.Empty;
            public int Tier { get; set; }
        
            // Defense values
            public int Avoidance { get; set; }
            public double Durability { get; set; }
            public int ResolveResistance { get; set; }
            public int StabilityResistance { get; set; }
            public int VitalityResistance { get; set; }
        
            // Point pools
            public int RemainingCombatAP { get; set; }
            public int RemainingUtilityAP { get; set; }
        
            // Attributes
            public CombatAttributesDto CombatAttributes { get; set; } = new();
            public UtilityAttributesDto UtilityAttributes { get; set; } = new();
        }
    }

--------------------------------------------------

File: server\Domain\DTOs\CombatAttributesDto.cs
Content:
namespace VitalityBuilder.Api.Models.DTOs;

public class CombatAttributesDto
{
    public int Focus { get; set; }
    public int Power { get; set; }
    public int Mobility { get; set; }
    public int Endurance { get; set; }
    public int Total => Focus + Power + Mobility + Endurance;
}
--------------------------------------------------

File: server\Domain\DTOs\CreateCharacterDto.cs
Content:
using VitalityBuilder.Api.Models.DTOs;

namespace VitalityBuilder.Api.Models.DTOs;

public class CreateCharacterDto
{
    public string Name { get; set; } = string.Empty;
    public int Tier { get; set; } = 1;
    public CombatAttributesDto CombatAttributes { get; set; } = new();
    public UtilityAttributesDto UtilityAttributes { get; set; } = new();
}
--------------------------------------------------

File: server\Domain\DTOs\UtilityAttributesDto.cs
Content:
namespace VitalityBuilder.Api.Models.DTOs;

public class UtilityAttributesDto
{
    public int Awareness { get; set; }
    public int Communication { get; set; }
    public int Intelligence { get; set; }
    public int Total => Awareness + Communication + Intelligence;
}
--------------------------------------------------

File: server\Domain\Entities\ArchetypeEntity.cs
Content:
using System.ComponentModel.DataAnnotations;
using VitalityBuilder.Api.Models.Archetypes;
using VitalityBuilder.Api.Models.Enums;

namespace VitalityBuilder.Api.Models.Entities;

public class CharacterArchetypesEntity
{
    public int Id { get; set; }
    public MovementArchetype MovementArchetype { get; set; } = null!;
    public AttackTypeArchetype AttackTypeArchetype { get; set; } = null!;
    public EffectTypeArchetype EffectTypeArchetype { get; set; } = null!;
    public UniqueAbilityArchetype UniqueAbilityArchetype { get; set; } = null!;
    public SpecialAttackArchetype SpecialAttackArchetype { get; set; } = null!;
    public UtilityArchetype UtilityArchetype { get; set; } = null!;
    
    public int CharacterId { get; set; }
    public CharacterArchetypesEntity CharacterEntity { get; set; } = null!;
}

public class MovementArchetypeEntity
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public MovementArchetypeType Type { get; set; }
    public Dictionary<int, int> SpeedBonusByTier { get; set; } = new();
    public bool IgnoresOpportunityAttacks { get; set; }
    public bool IgnoresDifficultTerrain { get; set; }
    public bool IsImmuneToProne { get; set; }
    public float MovementMultiplier { get; set; } = 1.0f;
    
    public int CharacterArchetypesId { get; set; }
    public CharacterArchetypesEntity CharacterArchetypesEntity { get; set; } = null!;
}


public class AttackTypeArchetypeEntity
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public AttackTypeArchetypeCategory Category { get; set; }
    public int AccuracyPenalty { get; set; }
    public int EffectPenalty { get; set; }
    public bool BypassesAccuracyChecks { get; set; }
    public bool HasFreeAOE { get; set; }
    
    public int CharacterArchetypesId { get; set; }
    public CharacterArchetypesEntity CharacterArchetypesEntity { get; set; } = null!;
}



public class EffectTypeArchetypeEntity
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public EffectTypeCategory Category { get; set; }
    public bool HasAccessToAdvancedConditions { get; set; }
    public int DamagePenalty { get; set; }
    public int ConditionPenalty { get; set; }
    public bool RequiresHybridEffects { get; set; }
    
    public int CharacterArchetypesId { get; set; }
    public CharacterArchetypesEntity CharacterArchetypesEntity { get; set; } = null!;
}



public class UniqueAbilityArchetypeEntity
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public UniqueAbilityCategory Category { get; set; }
    public int ExtraQuickActions { get; set; }
    public int ExtraPointPool { get; set; }
    public Dictionary<string, int> StatBonuses { get; set; } = new();
    
    public int CharacterArchetypesId { get; set; }
    public CharacterArchetypesEntity CharacterArchetypesEntity { get; set; } = null!;
}



public class SpecialAttackArchetypeEntity
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public SpecialAttackCategory Category { get; set; }
    public int BasePoints { get; set; }
    public int MaxSpecialAttacks { get; set; }
    public float LimitPointMultiplier { get; set; }
    public bool CanTakeLimits { get; set; }
    public List<string> RequiredLimits { get; set; } = new();
    
    public int CharacterArchetypesId { get; set; }
    public CharacterArchetypesEntity CharacterArchetypesEntity { get; set; } = null!;
}



public class UtilityArchetypeEntity
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public UtilityCategory Category { get; set; }
    public int BaseUtilityPool { get; set; }
    public bool CanPurchaseExpertise { get; set; }
    public float TierBonusMultiplier { get; set; }
    public List<string> Restrictions { get; set; } = new();
    
    public int CharacterArchetypesId { get; set; }
    public CharacterArchetypesEntity CharacterArchetypesEntity { get; set; } = null!;
}

--------------------------------------------------

File: server\Domain\Entities\CharacterEntity.cs
Content:
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json.Serialization;

namespace VitalityBuilder.Api.Models.Entities;

public class CharacterEntity
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public int Tier { get; set; } = 1;
    
    [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
    public int MainPointPool { get; private set; }

    public int SpecialAttacksPointPool { get; set; }
    public int UtilityPointPool { get; set; }

    // Navigation Properties
    [JsonIgnore]
    public virtual CombatAttributes? CombatAttributes { get; set; }
    
    [JsonIgnore]
    public virtual UtilityAttributes? UtilityAttributes { get; set; }
    
    [JsonIgnore]
    public virtual ICollection<Expertise> Expertise { get; set; } = new List<Expertise>();
    
    [JsonIgnore]
    public virtual ICollection<SpecialAttack> SpecialAttacks { get; set; } = new List<SpecialAttack>();
    
    [JsonIgnore]
    public virtual ICollection<UniquePower> UniquePowers { get; set; } = new List<UniquePower>();

    // Add method for tier updates to encapsulate any future tier-related logic
    public void UpdateTier(int newTier)
    {
        if (newTier < 1) throw new ArgumentException("Tier cannot be less than 1", nameof(newTier));
        Tier = newTier;
        // MainPointPool will be automatically recalculated by the database
    }
    
    [JsonIgnore]
    public virtual Models.Archetypes.CharacterArchetypes? CharacterArchetypes { get; set; }

    // Calculated properties
    [NotMapped]
    public int AvailableMainPoints => MainPointPool - (Expertise?.Sum(e => e.Cost) ?? 0);

    [NotMapped]
    public int AvailableSpecialAttacksPoints => SpecialAttacksPointPool - (SpecialAttacks?.Sum(sa => sa.Cost) ?? 0);

    [NotMapped]
    public int AvailableUtilityPoints => UtilityPointPool - (UniquePowers?.Sum(up => up.Cost) ?? 0);
}
--------------------------------------------------

File: server\Domain\Entities\CombatAttributesEntity.cs
Content:
namespace VitalityBuilder.Api.Models.Entities;

public class CombatAttributes
{
    public int Id { get; set; }
    public int Focus { get; set; }
    public int Power { get; set; }
    public int Mobility { get; set; }
    public int Endurance { get; set; }

    public int CharacterId { get; set; }
    public CharacterEntity Character { get; set; } = null!;
    public int Total { get; internal set; }
}


--------------------------------------------------

File: server\Domain\Entities\ExpertiseEntity.cs
Content:
namespace VitalityBuilder.Api.Models.Entities;
public class Expertise
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public string Category { get; set; } = string.Empty;
    public int Cost { get; set; }
    public string Description { get; set; } = string.Empty;

    public int CharacterId { get; set; }
    public CharacterEntity Character { get; set; } = null!;
}
--------------------------------------------------

File: server\Domain\Entities\SpecialAttackEntity.cs
Content:
namespace VitalityBuilder.Api.Models.Entities;
public class SpecialAttack
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public string AttackType { get; set; } = string.Empty;
    public string EffectType { get; set; } = string.Empty;
    public List<string> Limits { get; set; } = new();
    public List<string> Upgrades { get; set; } = new();

    public int CharacterId { get; set; }
    public CharacterEntity Character { get; set; } = null!;
    public int Cost { get; set; }


}

--------------------------------------------------

File: server\Domain\Entities\UniquePowerEntity.cs
Content:
namespace VitalityBuilder.Api.Models.Entities;
public class UniquePower
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public string Category { get; set; } = string.Empty;
    public int Cost { get; set; }
    public string Description { get; set; } = string.Empty;

    public int CharacterId { get; set; }
    public CharacterEntity Character { get; set; } = null!;
}
--------------------------------------------------

File: server\Domain\Entities\UtilityAttributesEntity.cs
Content:
namespace VitalityBuilder.Api.Models.Entities;
public class UtilityAttributes
{
    public int Id { get; set; }
    public int Awareness { get; set; }
    public int Communication { get; set; }
    public int Intelligence { get; set; }

    public int CharacterId { get; set; }
    public CharacterEntity Character { get; set; } = null!;

    
}
--------------------------------------------------

File: server\Domain\Enums\ArchetypeEnums.cs
Content:
namespace VitalityBuilder.Api.Models.Enums;

public enum MovementArchetypeType
{
    Swift,
    Skirmisher,
    ParkourRunner,
    Behemoth,
    Bulwark,
    Vanguard,
    Mole,
    Flight,
    Teleportation,
    Portal,
    Swinging,
    SuperJump
}

public enum AttackTypeArchetypeCategory
{
    AOESpecialist,
    DirectSpecialist,
    SingleTarget
}

public enum EffectTypeCategory
{
    DamageSpecialist,
    HybridSpecialist,
    CrowdControl
}

public enum UniqueAbilityCategory
{
    VersatileMaster,
    Extraordinary,
    CutAbove
}

public enum SpecialAttackCategory
{
    Normal,
    Specialist,
    Paragon,
    OneTrick,
    Straightforward,
    SharedUses,
    DualNatured,
    Basic
}

public enum UtilityCategory
{
    Specialized,
    Practical,
    JackOfAllTrades
}
--------------------------------------------------

File: server\Domain\Validations\ArchetypeValidators.cs
Content:
using FluentValidation;
using VitalityBuilder.Api.Models.DTOs;
using VitalityBuilder.Api.Models.Archetypes;

namespace VitalityBuilder.Api.Models.Validations;

public class AttackTypeArchetypeDtoValidator : AbstractValidator<AttackTypeArchetypeDto>
{
    public AttackTypeArchetypeDtoValidator()
    {
        RuleFor(static x => x.Name)
            .NotEmpty()
            .MaximumLength(100);

        RuleFor(static x => x.Category)
            .IsInEnum()
            .WithMessage("Invalid attack type category specified");

        RuleFor(static x => x.AccuracyPenalty)
            .GreaterThanOrEqualTo(0)
            .When(static x => (int)x.Category == (int)AttackTypeArchetypeCategory.AOESpecialist)
            .WithMessage("AOE Specialist must have a non-negative accuracy penalty");

        RuleFor(static x => x.EffectPenalty)
            .GreaterThanOrEqualTo(0)
            .When(static x => (int)x.Category == (int)AttackTypeArchetypeCategory.DirectSpecialist)
            .WithMessage("Direct Specialist must have a non-negative effect penalty");
    }
}

public class EffectTypeArchetypeDtoValidator : AbstractValidator<EffectTypeArchetypeDto>
{
    public EffectTypeArchetypeDtoValidator()
    {
        RuleFor(static x => x.Name)
            .NotEmpty()
            .MaximumLength(100);

        RuleFor(static x => x.Category)
            .IsInEnum()
            .WithMessage("Invalid effect type category specified");

        RuleFor(static x => x.DamagePenalty)
            .GreaterThanOrEqualTo(0)
            .When(static x => (int)x.Category == (int)EffectTypeCategory.HybridSpecialist || (int)x.Category == (int)EffectTypeCategory.CrowdControl)
            .WithMessage("Damage penalty must be non-negative for Hybrid Specialist and Crowd Control");

        RuleFor(static x => x.ConditionPenalty)
            .GreaterThanOrEqualTo(0)
            .When(static x => (int)x.Category == (int)EffectTypeCategory.HybridSpecialist)
            .WithMessage("Condition penalty must be non-negative for Hybrid Specialist");
    }
}

public class UniqueAbilityArchetypeDtoValidator : AbstractValidator<UniqueAbilityArchetypeDto>
{
    public UniqueAbilityArchetypeDtoValidator()
    {
        RuleFor(static x => x.Name)
            .NotEmpty()
            .MaximumLength(100);

        RuleFor(static x => x.Category)
            .IsInEnum()
            .WithMessage("Invalid unique ability category specified");

        RuleFor(static x => x.ExtraQuickActions)
            .GreaterThanOrEqualTo(0)
            .When(static x => (int)x.Category == (int)UniqueAbilityCategory.VersatileMaster)
            .WithMessage("Extra quick actions must be non-negative for Versatile Master");

        RuleFor(static x => x.ExtraPointPool)
            .GreaterThanOrEqualTo(0)
            .When(static x => (int)x.Category == (int)UniqueAbilityCategory.Extraordinary)
            .WithMessage("Extra point pool must be non-negative for Extraordinary");

        RuleFor(static x => x.StatBonuses)
            .NotNull()
            .Must(static x => x.All(static kvp => kvp.Value >= 0))
            .WithMessage("All stat bonuses must be non-negative");
    }
}

public class SpecialAttackArchetypeDtoValidator : AbstractValidator<SpecialAttackArchetypeDto>
{
    public SpecialAttackArchetypeDtoValidator()
    {
        RuleFor(static x => x.Name)
            .NotEmpty()
            .MaximumLength(100);

        RuleFor(static x => x.Category)
            .IsInEnum()
            .WithMessage("Invalid special attack category specified");

        RuleFor(static x => x.BasePoints)
            .GreaterThanOrEqualTo(0)
            .WithMessage("Base points must be non-negative");

        RuleFor(static x => x.MaxSpecialAttacks)
            .GreaterThanOrEqualTo(1)
            .WithMessage("Maximum special attacks must be at least 1");

        RuleFor(static x => x.LimitPointMultiplier)
            .GreaterThanOrEqualTo(0)
            .When(static x => x.CanTakeLimits)
            .WithMessage("Limit point multiplier must be non-negative when limits are allowed");

        RuleFor(static x => x.RequiredLimits)
            .NotNull()
            .Must(static x => !x.Any(string.IsNullOrWhiteSpace))
            .When(static x => (int)x.Category == (int)SpecialAttackCategory.Specialist)
            .WithMessage("Specialist archetype must have at least one required limit");
    }
}

public class UtilityArchetypeDtoValidator : AbstractValidator<UtilityArchetypeDto>
{
    public UtilityArchetypeDtoValidator()
    {
        RuleFor(static x => x.Name)
            .NotEmpty()
            .MaximumLength(100);

        RuleFor(static x => x.Category)
            .IsInEnum()
            .WithMessage("Invalid utility category specified");

        RuleFor(static x => x.BaseUtilityPool)
            .GreaterThanOrEqualTo(0)
            .WithMessage("Base utility pool must be non-negative");

        RuleFor(static x => x.TierBonusMultiplier)
            .GreaterThanOrEqualTo(0)
            .WithMessage("Tier bonus multiplier must be non-negative");

        RuleFor(static x => x.Restrictions)
            .NotNull()
            .Must(static x => !x.Any(string.IsNullOrWhiteSpace))
            .When(static x => (int)x.Category == (int)UtilityCategory.Specialized || (int)x.Category == (int)UtilityCategory.JackOfAllTrades)
            .WithMessage("Specialized and Jack of All Trades archetypes must have valid restrictions");
    }
}
--------------------------------------------------

File: server\Domain\Validations\CharacterValidators.cs
Content:
using FluentValidation;
using VitalityBuilder.Api.Models.DTOs;

namespace VitalityBuilder.Api.Models.Validations;

public class CreateCharacterDtoValidator : AbstractValidator<CreateCharacterDto>
{
    public CreateCharacterDtoValidator()
    {
        RuleFor(x => x.Name)
            .NotEmpty().WithMessage("Character name is required")
            .MaximumLength(100).WithMessage("Name cannot exceed 100 characters");

        RuleFor(x => x.Tier)
            .InclusiveBetween(1, 10)
            .WithMessage("Tier must be between 1 and 10");

        RuleFor(x => x.CombatAttributes)
            .NotNull()
            .SetValidator(new CombatAttributesDtoValidator());

        RuleFor(x => x.UtilityAttributes)
            .NotNull()
            .SetValidator(new UtilityAttributesDtoValidator());
    }
}

public class CombatAttributesDtoValidator : AbstractValidator<CombatAttributesDto>
{
    public CombatAttributesDtoValidator()
    {
        RuleFor(x => x.Focus)
            .GreaterThanOrEqualTo(0)
            .WithMessage("Focus cannot be negative");

        RuleFor(x => x.Power)
            .GreaterThanOrEqualTo(0)
            .WithMessage("Power cannot be negative");

        RuleFor(x => x.Mobility)
            .GreaterThanOrEqualTo(0)
            .WithMessage("Mobility cannot be negative");

        RuleFor(x => x.Endurance)
            .GreaterThanOrEqualTo(0)
            .WithMessage("Endurance cannot be negative");

        RuleFor(x => x.Total)
            .Must((dto, total) => total >= 0)
            .WithMessage("Total combat attributes cannot be negative");
    }
}

public class UtilityAttributesDtoValidator : AbstractValidator<UtilityAttributesDto>
{
    public UtilityAttributesDtoValidator()
    {
        RuleFor(x => x.Awareness)
            .GreaterThanOrEqualTo(0)
            .WithMessage("Awareness cannot be negative");

        RuleFor(x => x.Communication)
            .GreaterThanOrEqualTo(0)
            .WithMessage("Communication cannot be negative");

        RuleFor(x => x.Intelligence)
            .GreaterThanOrEqualTo(0)
            .WithMessage("Intelligence cannot be negative");

        RuleFor(x => x.Total)
            .Must((dto, total) => total >= 0)
            .WithMessage("Total utility attributes cannot be negative");
    }
}

public class CharacterArchetypesDtoValidator : AbstractValidator<CharacterArchetypesDto>
{
    public CharacterArchetypesDtoValidator()
    {
        RuleFor(x => x.MovementArchetype)
            .NotNull()
            .SetValidator(new MovementArchetypeDtoValidator());

        RuleFor(x => x.AttackTypeArchetype)
            .NotNull()
            .SetValidator(new AttackTypeArchetypeDtoValidator());

        RuleFor(x => x.EffectTypeArchetype)
            .NotNull()
            .SetValidator(new EffectTypeArchetypeDtoValidator());

        RuleFor(x => x.UniqueAbilityArchetype)
            .NotNull()
            .SetValidator(new UniqueAbilityArchetypeDtoValidator());

        RuleFor(x => x.SpecialAttackArchetype)
            .NotNull()
            .SetValidator(new SpecialAttackArchetypeDtoValidator());

        RuleFor(x => x.UtilityArchetype)
            .NotNull()
            .SetValidator(new UtilityArchetypeDtoValidator());
    }
}

public class MovementArchetypeDtoValidator : AbstractValidator<MovementArchetypeDto>
{
    public MovementArchetypeDtoValidator()
    {
        RuleFor(x => x.Name)
            .NotEmpty()
            .MaximumLength(100);

        RuleFor(x => x.Type)
            .IsInEnum()
            .WithMessage("Invalid movement type specified");

        RuleFor(x => x.SpeedBonusByTier)
            .NotNull()
            .Must(x => x.All(kvp => kvp.Key >= 1 && kvp.Key <= 10))
            .WithMessage("Tier bonuses must be between 1 and 10")
            .Must(x => x.All(kvp => kvp.Value >= 0))
            .WithMessage("Speed bonuses must be non-negative");

        RuleFor(x => x.MovementMultiplier)
            .InclusiveBetween(0.5f, 2.0f)
            .WithMessage("Movement multiplier must be between 0.5 and 2.0");
    }
}
--------------------------------------------------
