=== Directory Tree ===
server/
  controllers/
  data/
  Infrastructure/
  migrations/
  models/
    Archetypes/
    DTOs/
    Entities/
  Properties/
  services/

=== File Contents ===

File: <WindowsPath.parents> appsettings.Development.json
Content:
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}

--------------------------------------------------

File: <WindowsPath.parents> appsettings.json
Content:
{
  "ConnectionStrings": {
    "DefaultConnection": "Server=localhost;Database=VitalityBuilder;Trusted_Connection=True;TrustServerCertificate=True;MultipleActiveResultSets=true"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}
--------------------------------------------------

File: <WindowsPath.parents> Data.cs
Content:

--------------------------------------------------

File: <WindowsPath.parents> Program.cs
Content:
using Microsoft.EntityFrameworkCore;
using Microsoft.OpenApi.Models;
using System.Text.Json.Serialization;
using VitalityBuilder.Api.Infrastructure; 
using VitalityBuilder.Api.Services;

var builder = WebApplication.CreateBuilder(args);

// Add ArchetypeDbContext
builder.Services.AddDbContext<ArchetypeDbContext>(options => 
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection"))
);

// Configure JSON options
builder.Services.AddControllers()
    .AddJsonOptions(options =>
    {
        options.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles;
        options.JsonSerializerOptions.DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull;
    });

// Configure logging
builder.Services.AddLogging(logging =>
{
    logging.AddConsole();
    logging.AddDebug();
});

// Add database context
builder.Services.AddDbContext<VitalityBuilderContext>(options => 
{
    var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
    options.UseSqlServer(connectionString);
    // Add logging for development
    if (builder.Environment.IsDevelopment())
    {
        options.EnableSensitiveDataLogging();
        options.EnableDetailedErrors();
    }
});

// Add services
builder.Services.AddScoped<ICharacterArchetypesService, CharacterArchetypesService>();

// Add Swagger
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(options =>
{
    options.SwaggerDoc("v1", new OpenApiInfo
    {
        Version = "v1",
        Title = "Vitality System Character Builder API",
        Description = "An ASP.NET Core Web API for managing Vitality System character creation"
    });
});

var app = builder.Build();

// Configure middleware
app.UseSwagger();
app.UseSwaggerUI(options =>
{
    options.SwaggerEndpoint("/swagger/v1/swagger.json", "v1");
    options.RoutePrefix = string.Empty;
});

app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();

// Ensure database exists
using (var scope = app.Services.CreateScope())
{
    var context = scope.ServiceProvider.GetRequiredService<VitalityBuilderContext>();
    context.Database.EnsureCreated();
}

app.Run();
--------------------------------------------------

File: <WindowsPath.parents> vitality.db
Content:
[Binary or non-UTF-8 file content omitted]
--------------------------------------------------

File: <WindowsPath.parents> VitalityBuilder.Api.csproj
Content:
<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <NoWarn>$(NoWarn);1591</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="9.0.1">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="9.0.1" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="7.2.0" />
  </ItemGroup>
</Project>
--------------------------------------------------

File: <WindowsPath.parents> VitalityBuilder.Api.http
Content:
@VitalityBuilder.Api_HostAddress = http://localhost:5034

GET {{VitalityBuilder.Api_HostAddress}}/weatherforecast/
Accept: application/json

###

--------------------------------------------------

File: <WindowsPath.parents> controllers\CharactersController.cs
Content:
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using VitalityBuilder.Api.Models.DTOs;
using VitalityBuilder.Api.Models.Entities;  // Make sure this is the correct namespace
using VitalityBuilder.Api.Services;
using VitalityBuilder.Api.Infrastructure;

namespace VitalityBuilder.Api.Controllers;

[ApiController]
[Route("api/[controller]")]
public class CharactersController : ControllerBase
{
    private readonly VitalityBuilderContext _context;
    private readonly ILogger<CharactersController> _logger;
    private readonly ICharacterArchetypesService _archetypeService;

    public CharactersController(
        VitalityBuilderContext context,
        ILogger<CharactersController> logger,
        ICharacterArchetypesService archetypeService)
    {
        _context = context;
        _logger = logger;
        _archetypeService = archetypeService;
    }

    [HttpPost]
    public async Task<ActionResult<Character>> CreateCharacter(CreateCharacterDto dto)
    {
        _logger.LogInformation("Received character creation request for {CharacterName}", dto.Name);

        if (string.IsNullOrWhiteSpace(dto.Name))
        {
            return BadRequest("Character name is required");
        }

        try 
        {
            var character = new Character
            {
                Name = dto.Name,
                Tier = dto.Tier,
                CombatAttributes = new CombatAttributes
                {
                    Focus = dto.CombatAttributes.Focus,
                    Power = dto.CombatAttributes.Power,
                    Mobility = dto.CombatAttributes.Mobility,
                    Endurance = dto.CombatAttributes.Endurance
                },
                UtilityAttributes = new UtilityAttributes
                {
                    Awareness = dto.UtilityAttributes.Awareness,
                    Communication = dto.UtilityAttributes.Communication,
                    Intelligence = dto.UtilityAttributes.Intelligence
                }
            };

            _context.Characters.Add(character);
            await _context.SaveChangesAsync();

            return CreatedAtAction(nameof(GetCharacter), new { id = character.Id }, character);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error creating character {CharacterName}", dto.Name);
            return StatusCode(500, "An error occurred while creating the character");
        }
    }

    [HttpGet("{id}")]
    public async Task<ActionResult<Character>> GetCharacter(int id)
    {
        var character = await _context.Characters
            .Include(c => c.CombatAttributes)
            .Include(c => c.UtilityAttributes)
            .Include(c => c.Expertise)
            .Include(c => c.SpecialAttacks)
            .Include(c => c.UniquePowers)
            .FirstOrDefaultAsync(c => c.Id == id);

        if (character == null)
        {
            return NotFound();
        }

        return character;
    }

    [HttpPut("{id}/archetypes")]
    public async Task<IActionResult> UpdateArchetypes(int id, [FromBody] CharacterArchetypesDto dto)
    {
        var character = await _context.Characters
            .Include(c => c.CharacterArchetypes)
            .FirstOrDefaultAsync(c => c.Id == id);

        if (character == null) return NotFound();

        try
        {
            var archetypes = await _archetypeService.CreateArchetypesAsync(dto, character.Id);
            
            character.SpecialAttacksPointPool = _archetypeService.CalculateSpecialAttackPoints(
                archetypes.SpecialAttackArchetype, 
                character.Tier
            );
            
            character.UtilityPointPool = _archetypeService.CalculateUtilityPoints(
                archetypes.UtilityArchetype,
                character.Tier
            );

            await _context.SaveChangesAsync();
            return Ok(character);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error updating archetypes for character {CharacterId}", id);
            return StatusCode(500, "Error updating archetypes");
        }
    }

    [HttpPut("{id}/combat-attributes")]
    public async Task<IActionResult> UpdateCombatAttributes(int id, [FromBody] CombatAttributesDto dto)
    {
        var character = await _context.Characters
            .Include(c => c.CombatAttributes)
            .FirstOrDefaultAsync(c => c.Id == id);

        if (character == null) return NotFound();

        // Validate against tier limits
        if (!ValidateCombatAttributes(dto, character.Tier))
        {
            return BadRequest("Attributes exceed tier limits");
        }

        if (character.CombatAttributes != null)
        {
            character.CombatAttributes.Focus = dto.Focus;
            character.CombatAttributes.Power = dto.Power;
            character.CombatAttributes.Mobility = dto.Mobility;
            character.CombatAttributes.Endurance = dto.Endurance;
            character.CombatAttributes.Total = dto.Total;
        }

        await _context.SaveChangesAsync();
        return Ok(character);
    }

    private static bool ValidateCombatAttributes(CombatAttributesDto attributes, int tier)
    {
        return attributes.Total <= tier * 2 
            && attributes.Focus <= tier
            && attributes.Power <= tier
            && attributes.Mobility <= tier
            && attributes.Endurance <= tier;
    }
}
--------------------------------------------------

File: <WindowsPath.parents> data\ICharacterRepository.cs
Content:
using VitalityBuilder.Api.Models; 
public interface ICharacterRepository
{
    Task<Character> CreateCharacterAsync(Character character);
    Task<List<Character>> GetAllCharactersAsync();
    Task<Character?> GetCharacterByIdAsync(int id);
}
--------------------------------------------------

File: <WindowsPath.parents> Infrastructure\AppDbContext.cs
Content:
using Microsoft.EntityFrameworkCore;
using VitalityBuilder.Api.Infrastructure;
using VitalityBuilder.Api.Models;
using VitalityBuilder.Api.Models.Archetypes;

namespace VitalityBuilder.Api.Infrastructure;

public class VitalityBuilderContext(DbContextOptions<VitalityBuilderContext> options) : DbContext(options)
{
    public DbSet<Models.Archetypes.CharacterArchetypes> CharacterArchetypes => Set<Models.Archetypes.CharacterArchetypes>();
    public DbSet<Character> Characters => Set<Character>();
    public DbSet<CombatAttributes> CombatAttributes => Set<CombatAttributes>();
    public DbSet<UtilityAttributes> UtilityAttributes => Set<UtilityAttributes>();
    public DbSet<Expertise> Expertise => Set<Expertise>();
    public DbSet<SpecialAttack> SpecialAttacks => Set<SpecialAttack>();
    public DbSet<UniquePower> UniquePowers => Set<UniquePower>();

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        // Configure Character relationships
        modelBuilder.Entity<Character>(entity =>
        {
            entity.HasKey(e => e.Id);
            
            entity.HasOne(e => e.CombatAttributes)
                .WithOne(e => e.Character)
                .HasForeignKey<CombatAttributes>(e => e.CharacterId)
                .IsRequired()
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(e => e.UtilityAttributes)
                .WithOne(e => e.Character)
                .HasForeignKey<UtilityAttributes>(e => e.CharacterId)
                .IsRequired()
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasMany(e => e.Expertise)
                .WithOne(e => e.Character)
                .HasForeignKey(e => e.CharacterId)
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasMany(e => e.SpecialAttacks)
                .WithOne(e => e.Character)
                .HasForeignKey(e => e.CharacterId)
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasMany(e => e.UniquePowers)
                .WithOne(e => e.Character)
                .HasForeignKey(e => e.CharacterId)
                .OnDelete(DeleteBehavior.Cascade);
        });

        // Configure MovementArchetype
        modelBuilder.Entity<Models.Archetypes.MovementArchetype>(entity =>
        {
            entity.Property(e => e.SpeedBonusByTier)
                .HasConversion(new JsonValueConverter<Dictionary<int, int>>())
                .Metadata.SetValueComparer(new JsonValueComparer<Dictionary<int, int>>());
        });

        // Configure SpecialAttack
        modelBuilder.Entity<SpecialAttack>(entity =>
        {
            entity.Property(e => e.Limits)
                .HasConversion(new JsonValueConverter<List<string>>())
                .Metadata.SetValueComparer(new JsonValueComparer<List<string>>());

            entity.Property(e => e.Upgrades)
                .HasConversion(new JsonValueConverter<List<string>>())
                .Metadata.SetValueComparer(new JsonValueComparer<List<string>>());
        });

        // Configure UniqueAbilityArchetype
        modelBuilder.Entity<Models.Archetypes.UniqueAbilityArchetype>(entity =>
        {
            entity.Property(e => e.StatBonuses)
                .HasConversion(new JsonValueConverter<Dictionary<string, int>>())
                .Metadata.SetValueComparer(new JsonValueComparer<Dictionary<string, int>>());
        });

        // Configure UtilityArchetype
        modelBuilder.Entity<Models.Archetypes.UtilityArchetype>(entity =>
        {
            entity.Property(e => e.Restrictions)
                .HasConversion(new JsonValueConverter<List<string>>())
                .Metadata.SetValueComparer(new JsonValueComparer<List<string>>());
        });
    }
}
--------------------------------------------------

File: <WindowsPath.parents> Infrastructure\ArchetypeDbContext.cs
Content:
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using System.Text.Json;
using VitalityBuilder.Api.Models;

namespace VitalityBuilder.Api.Infrastructure
{


    /// <summary>
    /// Database context for handling character archetype-related data and relationships.
    /// This context manages the persistence of character archetypes and their associated rule configurations.
    /// </summary>
    public class ArchetypeDbContext : DbContext
    {
        public ArchetypeDbContext(DbContextOptions<ArchetypeDbContext> options) 
            : base(options) { }

        /// <summary>
        /// Database set for character archetypes and their associated components
        /// </summary>
        public DbSet<CharacterArchetypes> CharacterArchetypes => Set<CharacterArchetypes>();

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            ConfigureCharacterArchetypes(modelBuilder);
            ConfigureMovementArchetype(modelBuilder);
            ConfigureAttackTypeArchetype(modelBuilder);
            ConfigureEffectTypeArchetype(modelBuilder);
            ConfigureUniqueAbilityArchetype(modelBuilder);
            ConfigureSpecialAttackArchetype(modelBuilder);
            ConfigureUtilityArchetype(modelBuilder);
        }

        private void ConfigureCharacterArchetypes(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CharacterArchetypes>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                
                // Configure one-to-one relationship with Character
                entity.HasOne(e => e.Character)
                    .WithOne()
                    .HasForeignKey<CharacterArchetypes>(e => e.CharacterId)
                    .OnDelete(DeleteBehavior.Cascade);

                // Configure required navigation properties
                entity.Navigation(e => e.MovementArchetype).IsRequired();
                entity.Navigation(e => e.AttackTypeArchetype).IsRequired();
                entity.Navigation(e => e.EffectTypeArchetype).IsRequired();
                entity.Navigation(e => e.UniqueAbilityArchetype).IsRequired();
                entity.Navigation(e => e.SpecialAttackArchetype).IsRequired();
                entity.Navigation(e => e.UtilityArchetype).IsRequired();

                // Configure table name
                entity.ToTable("CharacterArchetypes");
            });
        }

        private void ConfigureMovementArchetype(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<MovementArchetype>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                
                entity.Property(e => e.SpeedBonusByTier)
                    .HasConversion(
                        v => JsonSerializer.Serialize(v, JsonSerializerOptions.Default),
                        v => JsonSerializer.Deserialize<Dictionary<int, int>>(v, JsonSerializerOptions.Default) 
                             ?? new Dictionary<int, int>(),
                        new ValueComparer<Dictionary<int, int>>(
                            (c1, c2) => c1!.SequenceEqual(c2!),
                            c => c.Aggregate(0, (a, v) => HashCode.Combine(a, v.GetHashCode())),
                            c => new Dictionary<int, int>(c)
                        )
                    );

                entity.Property(e => e.Type)
                    .HasConversion<string>();

                entity.ToTable("MovementArchetypes");
            });
        }

        private void ConfigureAttackTypeArchetype(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AttackTypeArchetype>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                
                entity.Property(e => e.Category)
                    .HasConversion<string>();

                entity.ToTable("AttackTypeArchetypes");
            });
        }

        private void ConfigureEffectTypeArchetype(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EffectTypeArchetype>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                
                entity.Property(e => e.Category)
                    .HasConversion<string>();

                entity.ToTable("EffectTypeArchetypes");
            });
        }

        private void ConfigureUniqueAbilityArchetype(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<UniqueAbilityArchetype>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                
                entity.Property(e => e.StatBonuses)
                    .HasConversion(
                        v => JsonSerializer.Serialize(v, JsonSerializerOptions.Default),
                        v => JsonSerializer.Deserialize<Dictionary<string, int>>(v, JsonSerializerOptions.Default) 
                             ?? new Dictionary<string, int>(),
                        new ValueComparer<Dictionary<string, int>>(
                            (c1, c2) => c1!.SequenceEqual(c2!),
                            c => c.Aggregate(0, (a, v) => HashCode.Combine(a, v.GetHashCode())),
                            c => new Dictionary<string, int>(c)
                        )
                    );

                entity.Property(e => e.Category)
                    .HasConversion<string>();

                entity.ToTable("UniqueAbilityArchetypes");
            });
        }

        private void ConfigureSpecialAttackArchetype(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<SpecialAttackArchetype>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                
                entity.Property(e => e.RequiredLimits)
                    .HasConversion(
                        v => JsonSerializer.Serialize(v, JsonSerializerOptions.Default),
                        v => JsonSerializer.Deserialize<List<string>>(v, JsonSerializerOptions.Default) 
                             ?? new List<string>(),
                        new ValueComparer<List<string>>(
                            (c1, c2) => c1!.SequenceEqual(c2!),
                            c => c.Aggregate(0, (a, v) => HashCode.Combine(a, v.GetHashCode())),
                            c => new List<string>(c)
                        )
                    );

                entity.Property(e => e.Category)
                    .HasConversion<string>();

                entity.ToTable("SpecialAttackArchetypes");
            });
        }

        private void ConfigureUtilityArchetype(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<UtilityArchetype>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                
                entity.Property(e => e.Restrictions)
                    .HasConversion(
                        v => JsonSerializer.Serialize(v, JsonSerializerOptions.Default),
                        v => JsonSerializer.Deserialize<List<string>>(v, JsonSerializerOptions.Default) 
                             ?? new List<string>(),
                        new ValueComparer<List<string>>(
                            (c1, c2) => c1!.SequenceEqual(c2!),
                            c => c.Aggregate(0, (a, v) => HashCode.Combine(a, v.GetHashCode())),
                            c => new List<string>(c)
                        )
                    );

                entity.Property(e => e.Category)
                    .HasConversion<string>();

                entity.ToTable("UtilityArchetypes");
            });
        }
    }
}
--------------------------------------------------

File: <WindowsPath.parents> Infrastructure\JsonValueConverter.cs
Content:
using System.Text.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Microsoft.EntityFrameworkCore.ChangeTracking;

namespace VitalityBuilder.Api.Infrastructure;

/// <summary>
/// Generic JSON value converter for Entity Framework Core
/// </summary>
public class JsonValueConverter<T> : ValueConverter<T, string> where T : class
{
    public JsonValueConverter() : base(
        // Serialize to JSON string
        v => JsonSerializer.Serialize(v, JsonSerializerOptions.Default),
        // Deserialize from JSON string with null handling
        v => v == null ? null! : JsonSerializer.Deserialize<T>(v, JsonSerializerOptions.Default)!
    )
    {
    }
}

/// <summary>
/// Generic JSON comparer for Entity Framework Core
/// </summary>
public class JsonValueComparer<T> : ValueComparer<T> where T : class
{
    private static bool EqualsJson(T? left, T? right)
    {
        if (left == null && right == null)
            return true;
        if (left == null || right == null)
            return false;
        return JsonSerializer.Serialize(left) == JsonSerializer.Serialize(right);
    }

    private static int GetHashCodeJson(T value)
    {
        if (value == null)
            return 0;
        return JsonSerializer.Serialize(value).GetHashCode();
    }

    private static T GetSnapshotJson(T value)
    {
        if (value == null)
            return null!;
        var json = JsonSerializer.Serialize(value);
        return JsonSerializer.Deserialize<T>(json)!;
    }

    public JsonValueComparer() : base(
        (l, r) => EqualsJson(l, r),
        v => GetHashCodeJson(v),
        v => GetSnapshotJson(v))
    {
    }
}
--------------------------------------------------

File: <WindowsPath.parents> migrations\20250209215104_InitialCreate.cs
Content:
﻿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace VitalityBuilder.Api.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Characters",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Tier = table.Column<int>(type: "int", nullable: false),
                    MainPointPool = table.Column<int>(type: "int", nullable: false),
                    SpecialAttacksPointPool = table.Column<int>(type: "int", nullable: false),
                    UtilityPointPool = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Characters", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CharacterArchetypes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CharacterId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CharacterArchetypes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CharacterArchetypes_Characters_CharacterId",
                        column: x => x.CharacterId,
                        principalTable: "Characters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CombatAttributes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Focus = table.Column<int>(type: "int", nullable: false),
                    Power = table.Column<int>(type: "int", nullable: false),
                    Mobility = table.Column<int>(type: "int", nullable: false),
                    Endurance = table.Column<int>(type: "int", nullable: false),
                    CharacterId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CombatAttributes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CombatAttributes_Characters_CharacterId",
                        column: x => x.CharacterId,
                        principalTable: "Characters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Expertise",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Category = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Cost = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CharacterId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Expertise", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Expertise_Characters_CharacterId",
                        column: x => x.CharacterId,
                        principalTable: "Characters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "SpecialAttacks",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AttackType = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EffectType = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Limits = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Upgrades = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CharacterId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SpecialAttacks", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SpecialAttacks_Characters_CharacterId",
                        column: x => x.CharacterId,
                        principalTable: "Characters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UniquePowers",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Category = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Cost = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CharacterId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UniquePowers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UniquePowers_Characters_CharacterId",
                        column: x => x.CharacterId,
                        principalTable: "Characters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UtilityAttributes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Awareness = table.Column<int>(type: "int", nullable: false),
                    Communication = table.Column<int>(type: "int", nullable: false),
                    Intelligence = table.Column<int>(type: "int", nullable: false),
                    CharacterId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UtilityAttributes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UtilityAttributes_Characters_CharacterId",
                        column: x => x.CharacterId,
                        principalTable: "Characters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AttackTypeArchetype",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Category = table.Column<int>(type: "int", nullable: false),
                    AccuracyPenalty = table.Column<int>(type: "int", nullable: false),
                    EffectPenalty = table.Column<int>(type: "int", nullable: false),
                    BypassesAccuracyChecks = table.Column<bool>(type: "bit", nullable: false),
                    HasFreeAOE = table.Column<bool>(type: "bit", nullable: false),
                    CharacterArchetypesId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AttackTypeArchetype", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AttackTypeArchetype_CharacterArchetypes_CharacterArchetypesId",
                        column: x => x.CharacterArchetypesId,
                        principalTable: "CharacterArchetypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "EffectTypeArchetype",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Category = table.Column<int>(type: "int", nullable: false),
                    HasAccessToAdvancedConditions = table.Column<bool>(type: "bit", nullable: false),
                    DamagePenalty = table.Column<int>(type: "int", nullable: false),
                    ConditionPenalty = table.Column<int>(type: "int", nullable: false),
                    RequiresHybridEffects = table.Column<bool>(type: "bit", nullable: false),
                    CharacterArchetypesId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EffectTypeArchetype", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EffectTypeArchetype_CharacterArchetypes_CharacterArchetypesId",
                        column: x => x.CharacterArchetypesId,
                        principalTable: "CharacterArchetypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MovementArchetype",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Type = table.Column<int>(type: "int", nullable: false),
                    SpeedBonusByTier = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IgnoresOpportunityAttacks = table.Column<bool>(type: "bit", nullable: false),
                    IgnoresDifficultTerrain = table.Column<bool>(type: "bit", nullable: false),
                    IsImmuneToProne = table.Column<bool>(type: "bit", nullable: false),
                    MovementMultiplier = table.Column<float>(type: "real", nullable: false),
                    CharacterArchetypesId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MovementArchetype", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MovementArchetype_CharacterArchetypes_CharacterArchetypesId",
                        column: x => x.CharacterArchetypesId,
                        principalTable: "CharacterArchetypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "SpecialAttackArchetype",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Category = table.Column<int>(type: "int", nullable: false),
                    BasePoints = table.Column<int>(type: "int", nullable: false),
                    MaxSpecialAttacks = table.Column<int>(type: "int", nullable: false),
                    LimitPointMultiplier = table.Column<float>(type: "real", nullable: false),
                    CanTakeLimits = table.Column<bool>(type: "bit", nullable: false),
                    RequiredLimits = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CharacterArchetypesId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SpecialAttackArchetype", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SpecialAttackArchetype_CharacterArchetypes_CharacterArchetypesId",
                        column: x => x.CharacterArchetypesId,
                        principalTable: "CharacterArchetypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UniqueAbilityArchetype",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Category = table.Column<int>(type: "int", nullable: false),
                    ExtraQuickActions = table.Column<int>(type: "int", nullable: false),
                    ExtraPointPool = table.Column<int>(type: "int", nullable: false),
                    StatBonuses = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CharacterArchetypesId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UniqueAbilityArchetype", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UniqueAbilityArchetype_CharacterArchetypes_CharacterArchetypesId",
                        column: x => x.CharacterArchetypesId,
                        principalTable: "CharacterArchetypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UtilityArchetype",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Category = table.Column<int>(type: "int", nullable: false),
                    BaseUtilityPool = table.Column<int>(type: "int", nullable: false),
                    CanPurchaseExpertise = table.Column<bool>(type: "bit", nullable: false),
                    TierBonusMultiplier = table.Column<float>(type: "real", nullable: false),
                    Restrictions = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CharacterArchetypesId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UtilityArchetype", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UtilityArchetype_CharacterArchetypes_CharacterArchetypesId",
                        column: x => x.CharacterArchetypesId,
                        principalTable: "CharacterArchetypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_AttackTypeArchetype_CharacterArchetypesId",
                table: "AttackTypeArchetype",
                column: "CharacterArchetypesId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_CharacterArchetypes_CharacterId",
                table: "CharacterArchetypes",
                column: "CharacterId");

            migrationBuilder.CreateIndex(
                name: "IX_CombatAttributes_CharacterId",
                table: "CombatAttributes",
                column: "CharacterId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_EffectTypeArchetype_CharacterArchetypesId",
                table: "EffectTypeArchetype",
                column: "CharacterArchetypesId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Expertise_CharacterId",
                table: "Expertise",
                column: "CharacterId");

            migrationBuilder.CreateIndex(
                name: "IX_MovementArchetype_CharacterArchetypesId",
                table: "MovementArchetype",
                column: "CharacterArchetypesId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_SpecialAttackArchetype_CharacterArchetypesId",
                table: "SpecialAttackArchetype",
                column: "CharacterArchetypesId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_SpecialAttacks_CharacterId",
                table: "SpecialAttacks",
                column: "CharacterId");

            migrationBuilder.CreateIndex(
                name: "IX_UniqueAbilityArchetype_CharacterArchetypesId",
                table: "UniqueAbilityArchetype",
                column: "CharacterArchetypesId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_UniquePowers_CharacterId",
                table: "UniquePowers",
                column: "CharacterId");

            migrationBuilder.CreateIndex(
                name: "IX_UtilityArchetype_CharacterArchetypesId",
                table: "UtilityArchetype",
                column: "CharacterArchetypesId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_UtilityAttributes_CharacterId",
                table: "UtilityAttributes",
                column: "CharacterId",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "AttackTypeArchetype");

            migrationBuilder.DropTable(
                name: "CombatAttributes");

            migrationBuilder.DropTable(
                name: "EffectTypeArchetype");

            migrationBuilder.DropTable(
                name: "Expertise");

            migrationBuilder.DropTable(
                name: "MovementArchetype");

            migrationBuilder.DropTable(
                name: "SpecialAttackArchetype");

            migrationBuilder.DropTable(
                name: "SpecialAttacks");

            migrationBuilder.DropTable(
                name: "UniqueAbilityArchetype");

            migrationBuilder.DropTable(
                name: "UniquePowers");

            migrationBuilder.DropTable(
                name: "UtilityArchetype");

            migrationBuilder.DropTable(
                name: "UtilityAttributes");

            migrationBuilder.DropTable(
                name: "CharacterArchetypes");

            migrationBuilder.DropTable(
                name: "Characters");
        }
    }
}

--------------------------------------------------

File: <WindowsPath.parents> migrations\20250209215104_InitialCreate.Designer.cs
Content:
﻿// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VitalityBuilder.Api.Infrastructure;

#nullable disable

namespace VitalityBuilder.Api.Migrations
{
    [DbContext(typeof(VitalityBuilderContext))]
    [Migration("20250209215104_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.AttackTypeArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccuracyPenalty")
                        .HasColumnType("int");

                    b.Property<bool>("BypassesAccuracyChecks")
                        .HasColumnType("bit");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<int>("EffectPenalty")
                        .HasColumnType("int");

                    b.Property<bool>("HasFreeAOE")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("AttackTypeArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.EffectTypeArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<int>("ConditionPenalty")
                        .HasColumnType("int");

                    b.Property<int>("DamagePenalty")
                        .HasColumnType("int");

                    b.Property<bool>("HasAccessToAdvancedConditions")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresHybridEffects")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("EffectTypeArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.MovementArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<bool>("IgnoresDifficultTerrain")
                        .HasColumnType("bit");

                    b.Property<bool>("IgnoresOpportunityAttacks")
                        .HasColumnType("bit");

                    b.Property<bool>("IsImmuneToProne")
                        .HasColumnType("bit");

                    b.Property<float>("MovementMultiplier")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpeedBonusByTier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("MovementArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.SpecialAttackArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BasePoints")
                        .HasColumnType("int");

                    b.Property<bool>("CanTakeLimits")
                        .HasColumnType("bit");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<float>("LimitPointMultiplier")
                        .HasColumnType("real");

                    b.Property<int>("MaxSpecialAttacks")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("RequiredLimits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("SpecialAttackArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.UniqueAbilityArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<int>("ExtraPointPool")
                        .HasColumnType("int");

                    b.Property<int>("ExtraQuickActions")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatBonuses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("UniqueAbilityArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.UtilityArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseUtilityPool")
                        .HasColumnType("int");

                    b.Property<bool>("CanPurchaseExpertise")
                        .HasColumnType("bit");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Restrictions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TierBonusMultiplier")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("UtilityArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MainPointPool")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecialAttacksPointPool")
                        .HasColumnType("int");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.Property<int>("UtilityPointPool")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.CombatAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Endurance")
                        .HasColumnType("int");

                    b.Property<int>("Focus")
                        .HasColumnType("int");

                    b.Property<int>("Mobility")
                        .HasColumnType("int");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("CombatAttributes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Expertise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Expertise");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.SpecialAttack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttackType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("EffectType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Limits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Upgrades")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("SpecialAttacks");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.UniquePower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("UniquePowers");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.UtilityAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Awareness")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Communication")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("UtilityAttributes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.AttackTypeArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("AttackTypeArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.AttackTypeArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.EffectTypeArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("EffectTypeArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.EffectTypeArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.MovementArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("MovementArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.MovementArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.SpecialAttackArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("SpecialAttackArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.SpecialAttackArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.UniqueAbilityArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("UniqueAbilityArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.UniqueAbilityArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.UtilityArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("UtilityArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.UtilityArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.CombatAttributes", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Character", "Character")
                        .WithOne("CombatAttributes")
                        .HasForeignKey("VitalityBuilder.Api.Models.CombatAttributes", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Expertise", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Character", "Character")
                        .WithMany("Expertise")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.SpecialAttack", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Character", "Character")
                        .WithMany("SpecialAttacks")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.UniquePower", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Character", "Character")
                        .WithMany("UniquePowers")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.UtilityAttributes", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Character", "Character")
                        .WithOne("UtilityAttributes")
                        .HasForeignKey("VitalityBuilder.Api.Models.UtilityAttributes", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", b =>
                {
                    b.Navigation("AttackTypeArchetype")
                        .IsRequired();

                    b.Navigation("EffectTypeArchetype")
                        .IsRequired();

                    b.Navigation("MovementArchetype")
                        .IsRequired();

                    b.Navigation("SpecialAttackArchetype")
                        .IsRequired();

                    b.Navigation("UniqueAbilityArchetype")
                        .IsRequired();

                    b.Navigation("UtilityArchetype")
                        .IsRequired();
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Character", b =>
                {
                    b.Navigation("CombatAttributes");

                    b.Navigation("Expertise");

                    b.Navigation("SpecialAttacks");

                    b.Navigation("UniquePowers");

                    b.Navigation("UtilityAttributes");
                });
#pragma warning restore 612, 618
        }
    }
}

--------------------------------------------------

File: <WindowsPath.parents> migrations\VitalityBuilderContextModelSnapshot.cs
Content:
﻿// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VitalityBuilder.Api.Infrastructure;

#nullable disable

namespace VitalityBuilder.Api.Migrations
{
    [DbContext(typeof(VitalityBuilderContext))]
    partial class VitalityBuilderContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.AttackTypeArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccuracyPenalty")
                        .HasColumnType("int");

                    b.Property<bool>("BypassesAccuracyChecks")
                        .HasColumnType("bit");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<int>("EffectPenalty")
                        .HasColumnType("int");

                    b.Property<bool>("HasFreeAOE")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("AttackTypeArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.EffectTypeArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<int>("ConditionPenalty")
                        .HasColumnType("int");

                    b.Property<int>("DamagePenalty")
                        .HasColumnType("int");

                    b.Property<bool>("HasAccessToAdvancedConditions")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresHybridEffects")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("EffectTypeArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.MovementArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<bool>("IgnoresDifficultTerrain")
                        .HasColumnType("bit");

                    b.Property<bool>("IgnoresOpportunityAttacks")
                        .HasColumnType("bit");

                    b.Property<bool>("IsImmuneToProne")
                        .HasColumnType("bit");

                    b.Property<float>("MovementMultiplier")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpeedBonusByTier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("MovementArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.SpecialAttackArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BasePoints")
                        .HasColumnType("int");

                    b.Property<bool>("CanTakeLimits")
                        .HasColumnType("bit");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<float>("LimitPointMultiplier")
                        .HasColumnType("real");

                    b.Property<int>("MaxSpecialAttacks")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("RequiredLimits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("SpecialAttackArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.UniqueAbilityArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<int>("ExtraPointPool")
                        .HasColumnType("int");

                    b.Property<int>("ExtraQuickActions")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatBonuses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("UniqueAbilityArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.UtilityArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseUtilityPool")
                        .HasColumnType("int");

                    b.Property<bool>("CanPurchaseExpertise")
                        .HasColumnType("bit");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Restrictions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TierBonusMultiplier")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("UtilityArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MainPointPool")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecialAttacksPointPool")
                        .HasColumnType("int");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.Property<int>("UtilityPointPool")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.CombatAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Endurance")
                        .HasColumnType("int");

                    b.Property<int>("Focus")
                        .HasColumnType("int");

                    b.Property<int>("Mobility")
                        .HasColumnType("int");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("CombatAttributes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Expertise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Expertise");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.SpecialAttack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttackType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("EffectType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Limits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Upgrades")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("SpecialAttacks");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.UniquePower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("UniquePowers");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.UtilityAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Awareness")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Communication")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("UtilityAttributes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.AttackTypeArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("AttackTypeArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.AttackTypeArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.EffectTypeArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("EffectTypeArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.EffectTypeArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.MovementArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("MovementArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.MovementArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.SpecialAttackArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("SpecialAttackArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.SpecialAttackArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.UniqueAbilityArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("UniqueAbilityArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.UniqueAbilityArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.UtilityArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("UtilityArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.UtilityArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.CombatAttributes", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Character", "Character")
                        .WithOne("CombatAttributes")
                        .HasForeignKey("VitalityBuilder.Api.Models.CombatAttributes", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Expertise", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Character", "Character")
                        .WithMany("Expertise")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.SpecialAttack", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Character", "Character")
                        .WithMany("SpecialAttacks")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.UniquePower", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Character", "Character")
                        .WithMany("UniquePowers")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.UtilityAttributes", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Character", "Character")
                        .WithOne("UtilityAttributes")
                        .HasForeignKey("VitalityBuilder.Api.Models.UtilityAttributes", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", b =>
                {
                    b.Navigation("AttackTypeArchetype")
                        .IsRequired();

                    b.Navigation("EffectTypeArchetype")
                        .IsRequired();

                    b.Navigation("MovementArchetype")
                        .IsRequired();

                    b.Navigation("SpecialAttackArchetype")
                        .IsRequired();

                    b.Navigation("UniqueAbilityArchetype")
                        .IsRequired();

                    b.Navigation("UtilityArchetype")
                        .IsRequired();
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Character", b =>
                {
                    b.Navigation("CombatAttributes");

                    b.Navigation("Expertise");

                    b.Navigation("SpecialAttacks");

                    b.Navigation("UniquePowers");

                    b.Navigation("UtilityAttributes");
                });
#pragma warning restore 612, 618
        }
    }
}

--------------------------------------------------

File: <WindowsPath.parents> Properties\launchSettings.json
Content:
﻿{
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "swagger",
      "applicationUrl": "http://localhost:5034",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}
--------------------------------------------------

File: <WindowsPath.parents> services\CharacterArchetypesService.Calculations.cs
Content:
using VitalityBuilder.Api.Models;
using VitalityBuilder.Api.Models.Archetypes;

namespace VitalityBuilder.Api.Services;

public partial class CharacterArchetypesService
{
    public int CalculateMovementSpeed(Models.Archetypes.MovementArchetype archetype, int tier, int mobility)
    {
        // Base movement is the higher of (6) or (mobility + tier)
        var baseSpeed = Math.Max(6, mobility + tier);
        
        // Apply archetype-specific modifiers
        switch (archetype.Type)
        {
            case Models.Archetypes.MovementArchetypeType.Swift:
                // Swift characters get bonus speed based on tier level
                baseSpeed += (tier + 1) / 2;
                break;
            case Models.Archetypes.MovementArchetypeType.Flight:
            case Models.Archetypes.MovementArchetypeType.Teleportation:
            case Models.Archetypes.MovementArchetypeType.Portal:
                baseSpeed = AdjustSpecialMovementSpeedForType(archetype.Type, baseSpeed);
                break;
        }

        // Apply any tier-specific bonuses configured for this archetype
        if (archetype.SpeedBonusByTier.TryGetValue(tier, out int bonus))
        {
            baseSpeed += bonus;
        }

        // Apply movement multiplier (e.g., for effects like swimming)
        return (int)(baseSpeed * archetype.MovementMultiplier);
    }

    private int AdjustSpecialMovementSpeedForType(Models.Archetypes.MovementArchetypeType type, int baseSpeed)
    {
        // Implement the logic for adjusting special movement speed here
        // For now, let's just return the baseSpeed as a placeholder
        return baseSpeed;
    }

    public int CalculateSpecialAttackPoints(SpecialAttackArchetype archetype, int tier)
    {
        return archetype.Category switch
        {
            SpecialAttackCategory.Paragon => 10 * tier,
            SpecialAttackCategory.OneTrick => 20 * tier,
            SpecialAttackCategory.DualNatured => 15 * tier,
            SpecialAttackCategory.Basic => 10 * tier,
            SpecialAttackCategory.Specialist => CalculateSpecialistPoints(tier, archetype.RequiredLimits),
            _ => 0
        };
    }

    public int CalculateUtilityPoints(UtilityArchetype archetype, int tier)
    {
        return archetype.Category switch
        {
            UtilityCategory.Specialized => 5 * (tier - 2),
            UtilityCategory.Practical => 5 * (tier - 1),
            UtilityCategory.JackOfAllTrades => 5 * (tier - 2),
            _ => 0
        };
    }


    public Dictionary<string, int> CalculateArchetypeBonuses(Models.Archetypes.CharacterArchetypes archetypes, int tier)
    {
        var bonuses = new Dictionary<string, int>();

        // Add movement archetype bonuses
        if (archetypes.MovementArchetype.Type == Models.Archetypes.MovementArchetypeType.Swift)
        {
            bonuses["MovementSpeed"] = (tier + 1) / 2;
        }

        // Add attack type bonuses/penalties
        if (archetypes.AttackTypeArchetype.Category == Models.Archetypes.AttackTypeArchetypeCategory.AOESpecialist)
        {
            bonuses["AOEAccuracy"] = -tier;
        }
        else if (archetypes.AttackTypeArchetype.Category == Models.Archetypes.AttackTypeArchetypeCategory.DirectSpecialist)
        {
            bonuses["DirectEffect"] = -tier;
        }

        // Add effect type bonuses/penalties
        if (archetypes.EffectTypeArchetype.Category == Models.Archetypes.EffectTypeCategory.HybridSpecialist)
        {
            bonuses["DamageRoll"] = -tier;
            bonuses["ConditionRoll"] = -tier;
        }
        else if (archetypes.EffectTypeArchetype.Category == Models.Archetypes.EffectTypeCategory.CrowdControl)
        {
            bonuses["DamageRoll"] = -tier;
        }

        // Add Cut Above archetype bonuses
        if (archetypes.UniqueAbilityArchetype.Category == Models.Archetypes.UniqueAbilityCategory.CutAbove)
        {
            var bonus = tier switch
            {
                <= 4 => 1,
                <= 7 => 2,
                _ => 3
            };
            
            bonuses["AllStats"] = bonus;
        }

        return bonuses;
    }
}
--------------------------------------------------

File: <WindowsPath.parents> services\CharacterArchetypesService.cs
Content:
using Microsoft.Extensions.Logging;
using VitalityBuilder.Api.Infrastructure;
using VitalityBuilder.Api.Models;
using VitalityBuilder.Api.Models.Archetypes;
using VitalityBuilder.Api.Models.DTOs;

namespace VitalityBuilder.Api.Services;

/// <summary>
/// Service implementing character archetype management and calculations
/// </summary>
public partial class CharacterArchetypesService : ICharacterArchetypesService
{
    private readonly ArchetypeDbContext _context;
    private readonly ILogger<CharacterArchetypesService> _logger;

    public CharacterArchetypesService(ArchetypeDbContext context, ILogger<CharacterArchetypesService> logger)
    {
        _context = context;
        _logger = logger;
    }

    public async Task<Models.Archetypes.CharacterArchetypes> CreateArchetypesAsync(CharacterArchetypesDto dto, int characterId)
    {
        _logger.LogInformation("Creating archetypes for character {CharacterId}", characterId);

        try
        {
            var archetypes = new Models.Archetypes.CharacterArchetypes
            {
                CharacterId = characterId,
                MovementArchetype = MapMovementArchetype(dto.MovementArchetype),
                AttackTypeArchetype = MapAttackTypeArchetype(dto.AttackTypeArchetype),
                EffectTypeArchetype = MapEffectTypeArchetype(dto.EffectTypeArchetype),
                UniqueAbilityArchetype = MapUniqueAbilityArchetype(dto.UniqueAbilityArchetype),
                SpecialAttackArchetype = MapSpecialAttackArchetype(dto.SpecialAttackArchetype),
                UtilityArchetype = MapUtilityArchetype(dto.UtilityArchetype)
            };

            _context.Set<Models.Archetypes.CharacterArchetypes>().Add(archetypes);
            await _context.SaveChangesAsync();

            _logger.LogInformation("Successfully created archetypes for character {CharacterId}", characterId);
            return archetypes;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error creating archetypes for character {CharacterId}", characterId);
            throw;
        }
    }

}

--------------------------------------------------

File: <WindowsPath.parents> services\CharacterArchetypesService.Helpers.cs
Content:
using VitalityBuilder.Api.Models.Archetypes;

namespace VitalityBuilder.Api.Services;

public partial class CharacterArchetypesService
{
    private static int CalculateNormalArchetypePoints(int tier) => tier * 10;

    private static int CalculateSpecialistPoints(int tier, List<string> requiredLimits)
    {
        float limitMultiplier = tier / 3.0f;
        int limitPoints = requiredLimits.Sum(GetLimitBaseValue);
        return (int)(limitPoints * limitMultiplier);
    }

    private static int GetLimitBaseValue(string limitName) => limitName switch
    {
        "Reload" => 20,
        "Stockpile" => 40,
        "Cooldown2" => 20,
        "Cooldown3" => 30,
        "Reserves3" => 10,
        "Reserves2" => 20,
        "Reserves1" => 40,
        "Finite5" => 10,
        "Finite3" => 20,
        "Finite2" => 30,
        "Finite1" => 50,
        "Charger" => 10,
        "Slowed" => 10,
        "Unreliable20" => 200,
        "Unreliable15" => 80,
        "Unreliable10" => 40,
        "Unreliable5" => 20,
        _ => 0
    };

    private static int AdjustSpecialMovementSpeed(MovementArchetypeType type, int baseSpeed) => type switch
    {
        MovementArchetypeType.Flight => baseSpeed,
        MovementArchetypeType.Teleportation => baseSpeed - 2, // Teleport has reduced range
        MovementArchetypeType.Portal => baseSpeed,
        _ => baseSpeed
    };
}

--------------------------------------------------

File: <WindowsPath.parents> services\CharacterArchetypesService.Mapping.cs
Content:
using VitalityBuilder.Api.Models.Archetypes;
using VitalityBuilder.Api.Models.DTOs;

namespace VitalityBuilder.Api.Services;

public partial class CharacterArchetypesService 
{
    private static MovementArchetype MapMovementArchetype(MovementArchetypeDto dto) => 
        new()
        {
            Name = dto.Name,
            Type = (MovementArchetypeType)dto.Type,
            SpeedBonusByTier = dto.SpeedBonusByTier,
            IgnoresOpportunityAttacks = dto.IgnoresOpportunityAttacks,
            IgnoresDifficultTerrain = dto.IgnoresDifficultTerrain,
            IsImmuneToProne = dto.IsImmuneToProne,
            MovementMultiplier = dto.MovementMultiplier
        };

    private static AttackTypeArchetype MapAttackTypeArchetype(AttackTypeArchetypeDto dto) => 
        new()
        {
            Name = dto.Name,
            Category = (AttackTypeArchetypeCategory)dto.Category,
            AccuracyPenalty = dto.AccuracyPenalty,
            EffectPenalty = dto.EffectPenalty,
            BypassesAccuracyChecks = dto.BypassesAccuracyChecks,
            HasFreeAOE = dto.HasFreeAOE
        };

    private static EffectTypeArchetype MapEffectTypeArchetype(EffectTypeArchetypeDto dto) =>
        new()
        {
            Name = dto.Name,
            Category = (EffectTypeCategory)dto.Category,
            HasAccessToAdvancedConditions = dto.HasAccessToAdvancedConditions,
            DamagePenalty = dto.DamagePenalty,
            ConditionPenalty = dto.ConditionPenalty,
            RequiresHybridEffects = dto.RequiresHybridEffects
        };

    private static UniqueAbilityArchetype MapUniqueAbilityArchetype(UniqueAbilityArchetypeDto dto) =>
        new()
        {
            Name = dto.Name,
            Category = (UniqueAbilityCategory)dto.Category,
            ExtraQuickActions = dto.ExtraQuickActions,
            ExtraPointPool = dto.ExtraPointPool,
            StatBonuses = dto.StatBonuses
        };

    private static SpecialAttackArchetype MapSpecialAttackArchetype(SpecialAttackArchetypeDto dto) =>
        new()
        {
            Name = dto.Name,
            Category = (SpecialAttackCategory)dto.Category,
            BasePoints = dto.BasePoints,
            MaxSpecialAttacks = dto.MaxSpecialAttacks,
            LimitPointMultiplier = dto.LimitPointMultiplier,
            CanTakeLimits = dto.CanTakeLimits,
            RequiredLimits = dto.RequiredLimits
        };

    private static UtilityArchetype MapUtilityArchetype(UtilityArchetypeDto dto) =>
        new()
        {
            Name = dto.Name,
            Category = (UtilityCategory)dto.Category,
            BaseUtilityPool = dto.BaseUtilityPool,
            CanPurchaseExpertise = dto.CanPurchaseExpertise,
            TierBonusMultiplier = dto.TierBonusMultiplier,
            Restrictions = dto.Restrictions
        };
}

--------------------------------------------------

File: <WindowsPath.parents> services\CombatService.cs
Content:
// Create Services/CombatService.cs
public class CombatService
{
    public (bool success, int effect) ResolveAttack(
        int attackerTier,
        int attackerFocus,
        int attackerPower,
        int targetMobility,
        int targetEndurance)
    {
        // Accuracy Check
        var accuracyRoll = new Random().Next(1, 21) + attackerTier + attackerFocus;
        var avoidance = 10 + attackerTier + targetMobility;
        
        if(accuracyRoll < avoidance) 
            return (false, 0);

        // Damage Calculation
        var damageRoll = Roll3d6() + attackerTier + (int)Math.Ceiling(attackerPower * 1.5);
        var durability = (int)Math.Ceiling(attackerTier + (targetEndurance * 1.5));
        
        return (true, Math.Max(0, damageRoll - durability));
    }

    private int Roll3d6()
    {
        var roll = new Random();
        int total = 0;
        int diceToRoll = 3;
        
        while(diceToRoll-- > 0)
        {
            int result = roll.Next(1, 7);
            total += result;
            if(result == 6) diceToRoll++;
        }
        
        return total;
    }
}
--------------------------------------------------

File: <WindowsPath.parents> services\ICharacterArchetypesServices.cs
Content:
using VitalityBuilder.Api.Models;
using VitalityBuilder.Api.Models.Archetypes;
using VitalityBuilder.Api.Models.DTOs;

namespace VitalityBuilder.Api.Services;

/// <summary>
/// Interface defining core character archetype management operations
/// </summary>
public interface ICharacterArchetypesService
{
    Task<Models.Archetypes.CharacterArchetypes> CreateArchetypesAsync(CharacterArchetypesDto dto, int characterId);
    int CalculateMovementSpeed(Models.Archetypes.MovementArchetype archetype, int tier, int mobility);
    int CalculateSpecialAttackPoints(Models.Archetypes.SpecialAttackArchetype archetype, int tier);
    int CalculateUtilityPoints(Models.Archetypes.UtilityArchetype archetype, int tier);
    Dictionary<string, int> CalculateArchetypeBonuses(Models.Archetypes.CharacterArchetypes archetypes, int tier);
}

--------------------------------------------------

File: <WindowsPath.parents> models\Archetypes\AttackTypeArchetype.cs
Content:
namespace VitalityBuilder.Api.Models.Archetypes;

public class AttackTypeArchetype
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public AttackTypeArchetypeCategory Category { get; set; }
    public int AccuracyPenalty { get; set; }
    public int EffectPenalty { get; set; }
    public bool BypassesAccuracyChecks { get; set; }
    public bool HasFreeAOE { get; set; }
    
    public int CharacterArchetypesId { get; set; }
    public CharacterArchetypes CharacterArchetypes { get; set; } = null!;
}
--------------------------------------------------

File: <WindowsPath.parents> models\Archetypes\CharacterArchetypes.cs
Content:
using System.ComponentModel.DataAnnotations;
using VitalityBuilder.Api.Models.Entities;

namespace VitalityBuilder.Api.Models.Archetypes;

public class CharacterArchetypes
{
    public int Id { get; set; }
    public MovementArchetype MovementArchetype { get; set; } = null!;
    public AttackTypeArchetype AttackTypeArchetype { get; set; } = null!;
    public EffectTypeArchetype EffectTypeArchetype { get; set; } = null!;
    public UniqueAbilityArchetype UniqueAbilityArchetype { get; set; } = null!;
    public SpecialAttackArchetype SpecialAttackArchetype { get; set; } = null!;
    public UtilityArchetype UtilityArchetype { get; set; } = null!;
    
    public int CharacterId { get; set; }
    public Character Character { get; set; } = null!;
}
--------------------------------------------------

File: <WindowsPath.parents> models\Archetypes\EffectTypeArchetype.cs
Content:
namespace VitalityBuilder.Api.Models.Archetypes;

public class EffectTypeArchetype
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public EffectTypeCategory Category { get; set; }
    public bool HasAccessToAdvancedConditions { get; set; }
    public int DamagePenalty { get; set; }
    public int ConditionPenalty { get; set; }
    public bool RequiresHybridEffects { get; set; }
    
    public int CharacterArchetypesId { get; set; }
    public CharacterArchetypes CharacterArchetypes { get; set; } = null!;
}
--------------------------------------------------

File: <WindowsPath.parents> models\Archetypes\Enums.cs
Content:
namespace VitalityBuilder.Api.Models.Archetypes;

public enum MovementArchetypeType
{
    Swift,
    Skirmisher,
    ParkourRunner,
    Behemoth,
    Bulwark,
    Vanguard,
    Mole,
    Flight,
    Teleportation,
    Portal,
    Swinging,
    SuperJump
}

public enum AttackTypeArchetypeCategory
{
    AOESpecialist,
    DirectSpecialist,
    SingleTarget
}

public enum EffectTypeCategory
{
    DamageSpecialist,
    HybridSpecialist,
    CrowdControl
}

public enum UniqueAbilityCategory
{
    VersatileMaster,
    Extraordinary,
    CutAbove
}

public enum SpecialAttackCategory
{
    Normal,
    Specialist,
    Paragon,
    OneTrick,
    Straightforward,
    SharedUses,
    DualNatured,
    Basic
}

public enum UtilityCategory
{
    Specialized,
    Practical,
    JackOfAllTrades
}
--------------------------------------------------

File: <WindowsPath.parents> models\Archetypes\MovementArchetype.cs
Content:
using System.ComponentModel.DataAnnotations.Schema;

namespace VitalityBuilder.Api.Models.Archetypes;

public class MovementArchetype
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public MovementArchetypeType Type { get; set; }
    
    [Column(TypeName = "nvarchar(max)")]
    public Dictionary<int, int> SpeedBonusByTier { get; set; } = new();
    
    public bool IgnoresOpportunityAttacks { get; set; }
    public bool IgnoresDifficultTerrain { get; set; }
    public bool IsImmuneToProne { get; set; }
    public float MovementMultiplier { get; set; } = 1.0f;
    
    public int CharacterArchetypesId { get; set; }
    public CharacterArchetypes CharacterArchetypes { get; set; } = null!;
}
--------------------------------------------------

File: <WindowsPath.parents> models\Archetypes\SpecialAttackArchetype.cs
Content:
namespace VitalityBuilder.Api.Models.Archetypes;

public class SpecialAttackArchetype
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public SpecialAttackCategory Category { get; set; }
    public int BasePoints { get; set; }
    public int MaxSpecialAttacks { get; set; }
    public float LimitPointMultiplier { get; set; }
    public bool CanTakeLimits { get; set; }
    public List<string> RequiredLimits { get; set; } = new();
    
    public int CharacterArchetypesId { get; set; }
    public CharacterArchetypes CharacterArchetypes { get; set; } = null!;
}

--------------------------------------------------

File: <WindowsPath.parents> models\Archetypes\UniqueAbilityArchetype.cs
Content:
namespace VitalityBuilder.Api.Models.Archetypes;

public class UniqueAbilityArchetype
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public UniqueAbilityCategory Category { get; set; }
    public int ExtraQuickActions { get; set; }
    public int ExtraPointPool { get; set; }
    public Dictionary<string, int> StatBonuses { get; set; } = new();
    
    public int CharacterArchetypesId { get; set; }
    public CharacterArchetypes CharacterArchetypes { get; set; } = null!;
}
--------------------------------------------------

File: <WindowsPath.parents> models\Archetypes\UtilityArchetype.cs
Content:
namespace VitalityBuilder.Api.Models.Archetypes;

public class UtilityArchetype
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public UtilityCategory Category { get; set; }
    public int BaseUtilityPool { get; set; }
    public bool CanPurchaseExpertise { get; set; }
    public float TierBonusMultiplier { get; set; }
    public List<string> Restrictions { get; set; } = new();
    
    public int CharacterArchetypesId { get; set; }
    public CharacterArchetypes CharacterArchetypes { get; set; } = null!;
}
--------------------------------------------------

File: <WindowsPath.parents> models\DTOs\CharacterArchetypesDTOs.cs
Content:
// File: Models/DTOs/CharacterArchetypesDto.cs
using VitalityBuilder.Api.Models.Entities;

namespace VitalityBuilder.Api.Models.DTOs;

/// <summary>
/// Data transfer object for creating or updating character archetypes
/// </summary>
public class CharacterArchetypesDto
{
    public MovementArchetypeDto MovementArchetype { get; set; } = null!;
    public AttackTypeArchetypeDto AttackTypeArchetype { get; set; } = null!;
    public EffectTypeArchetypeDto EffectTypeArchetype { get; set; } = null!;
    public UniqueAbilityArchetypeDto UniqueAbilityArchetype { get; set; } = null!;
    public SpecialAttackArchetypeDto SpecialAttackArchetype { get; set; } = null!;
    public UtilityArchetypeDto UtilityArchetype { get; set; } = null!;
}

public class MovementArchetypeDto
{
    public string Name { get; set; } = string.Empty;
    public MovementArchetypeType Type { get; set; }
    public Dictionary<int, int> SpeedBonusByTier { get; set; } = new();
    public bool IgnoresOpportunityAttacks { get; set; }
    public bool IgnoresDifficultTerrain { get; set; }
    public bool IsImmuneToProne { get; set; }
    public float MovementMultiplier { get; set; } = 1.0f;
}

public class AttackTypeArchetypeDto
{
    public string Name { get; set; } = string.Empty;
    public AttackTypeArchetypeCategory Category { get; set; }
    public int AccuracyPenalty { get; set; }
    public int EffectPenalty { get; set; }
    public bool BypassesAccuracyChecks { get; set; }
    public bool HasFreeAOE { get; set; }
}

public class EffectTypeArchetypeDto
{
    public string Name { get; set; } = string.Empty;
    public EffectTypeCategory Category { get; set; }
    public bool HasAccessToAdvancedConditions { get; set; }
    public int DamagePenalty { get; set; }
    public int ConditionPenalty { get; set; }
    public bool RequiresHybridEffects { get; set; }
}

public class UniqueAbilityArchetypeDto
{
    public string Name { get; set; } = string.Empty;
    public UniqueAbilityCategory Category { get; set; }
    public int ExtraQuickActions { get; set; }
    public int ExtraPointPool { get; set; }
    public Dictionary<string, int> StatBonuses { get; set; } = new();
}

public class SpecialAttackArchetypeDto
{
    public string Name { get; set; } = string.Empty;
    public SpecialAttackCategory Category { get; set; }
    public int BasePoints { get; set; }
    public int MaxSpecialAttacks { get; set; }
    public float LimitPointMultiplier { get; set; }
    public bool CanTakeLimits { get; set; }
    public List<string> RequiredLimits { get; set; } = new();
}

public class UtilityArchetypeDto
{
    public string Name { get; set; } = string.Empty;
    public UtilityCategory Category { get; set; }
    public int BaseUtilityPool { get; set; }
    public bool CanPurchaseExpertise { get; set; }
    public float TierBonusMultiplier { get; set; }
    public List<string> Restrictions { get; set; } = new();
}
--------------------------------------------------

File: <WindowsPath.parents> models\DTOs\CharacterDTOs.cs
Content:
namespace VitalityBuilder.Api.Models.DTOs
    {

        public class CharacterResponseDto
        {
            public int Id { get; set; }
            public string Name { get; set; } = string.Empty;
            public int Tier { get; set; }
        
            // Defense values
            public int Avoidance { get; set; }
            public double Durability { get; set; }
            public int ResolveResistance { get; set; }
            public int StabilityResistance { get; set; }
            public int VitalityResistance { get; set; }
        
            // Point pools
            public int RemainingCombatAP { get; set; }
            public int RemainingUtilityAP { get; set; }
        
            // Attributes
            public CombatAttributesDto CombatAttributes { get; set; } = new();
            public UtilityAttributesDto UtilityAttributes { get; set; } = new();
        }
    }

--------------------------------------------------

File: <WindowsPath.parents> models\DTOs\CombatAttributesDto.cs
Content:
namespace VitalityBuilder.Api.Models.DTOs;

public class CombatAttributesDto
{
    public int Focus { get; set; }
    public int Power { get; set; }
    public int Mobility { get; set; }
    public int Endurance { get; set; }
    public int Total => Focus + Power + Mobility + Endurance;
}
--------------------------------------------------

File: <WindowsPath.parents> models\DTOs\CreateCharacterDto.cs
Content:
namespace VitalityBuilder.Api.Models.DTOs;

public class CreateCharacterDto
{
    public string Name { get; set; } = string.Empty;
    public int Tier { get; set; } = 1;
    public CombatAttributesDto CombatAttributes { get; set; } = new();
    public UtilityAttributesDto UtilityAttributes { get; set; } = new();
}
--------------------------------------------------

File: <WindowsPath.parents> models\DTOs\UtilityAttributesDto.cs
Content:
namespace VitalityBuilder.Api.Models.DTOs;

public class UtilityAttributesDto
{
    public int Awareness { get; set; }
    public int Communication { get; set; }
    public int Intelligence { get; set; }
    public int Total => Awareness + Communication + Intelligence;
}
--------------------------------------------------

File: <WindowsPath.parents> models\Entities\Character.cs
Content:
using System.Text.Json.Serialization;

namespace VitalityBuilder.Api.Models.Entities;  // Make sure this is the correct namespace

public class Character
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public int Tier { get; set; } = 1;
    
    // Point Pool Calculations
    public int CombatAP => Tier * 2;
    public int UtilityAP => Tier;
    public int MainPointPool => Math.Max(0, (Tier - 2) * 15);
    public int SpecialAttacksPointPool { get; set; }
    public int UtilityPointPool { get; set; }
    
    // Defense Calculations
    public int Avoidance => 10 + Tier + (CombatAttributes?.Mobility ?? 0);
    public double Durability => Math.Ceiling(Tier + (CombatAttributes?.Endurance * 1.5) ?? 0);
    public int HealthPool => 100;

    // Navigation Properties
    [JsonIgnore]
    public virtual CombatAttributes? CombatAttributes { get; set; }
    [JsonIgnore]
    public virtual UtilityAttributes? UtilityAttributes { get; set; }
    [JsonIgnore]
    public virtual List<Expertise> Expertise { get; set; } = new();
    [JsonIgnore]
    public virtual List<SpecialAttack> SpecialAttacks { get; set; } = new();
    [JsonIgnore]
    public virtual List<UniquePower> UniquePowers { get; set; } = new();
    [JsonIgnore]
    public virtual Models.Archetypes.CharacterArchetypes? CharacterArchetypes { get; set; }

    [JsonIgnore]
    public int AvailableMainPoints => MainPointPool - Expertise.Sum(e => e.Cost);
}
--------------------------------------------------

File: <WindowsPath.parents> models\Entities\CharacterArchetypes.cs
Content:
using System.ComponentModel.DataAnnotations;

namespace VitalityBuilder.Api.Models.Entities;

public class CharacterArchetypes
{
    public int Id { get; set; }
    public MovementArchetype MovementArchetype { get; set; } = null!;
    public AttackTypeArchetype AttackTypeArchetype { get; set; } = null!;
    public EffectTypeArchetype EffectTypeArchetype { get; set; } = null!;
    public UniqueAbilityArchetype UniqueAbilityArchetype { get; set; } = null!;
    public SpecialAttackArchetype SpecialAttackArchetype { get; set; } = null!;
    public UtilityArchetype UtilityArchetype { get; set; } = null!;
    
    public int CharacterId { get; set; }
    public Character Character { get; set; } = null!;
}

public class MovementArchetype
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public MovementArchetypeType Type { get; set; }
    public Dictionary<int, int> SpeedBonusByTier { get; set; } = new();
    public bool IgnoresOpportunityAttacks { get; set; }
    public bool IgnoresDifficultTerrain { get; set; }
    public bool IsImmuneToProne { get; set; }
    public float MovementMultiplier { get; set; } = 1.0f;
    
    public int CharacterArchetypesId { get; set; }
    public CharacterArchetypes CharacterArchetypes { get; set; } = null!;
}

public enum MovementArchetypeType
{
    Swift,
    Skirmisher,
    ParkourRunner,
    Behemoth,
    Bulwark,
    Vanguard,
    Mole,
    Flight,
    Teleportation,
    Portal,
    Swinging,
    SuperJump
}

public class AttackTypeArchetype
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public AttackTypeArchetypeCategory Category { get; set; }
    public int AccuracyPenalty { get; set; }
    public int EffectPenalty { get; set; }
    public bool BypassesAccuracyChecks { get; set; }
    public bool HasFreeAOE { get; set; }
    
    public int CharacterArchetypesId { get; set; }
    public CharacterArchetypes CharacterArchetypes { get; set; } = null!;
}

public enum AttackTypeArchetypeCategory
{
    AOESpecialist,
    DirectSpecialist,
    SingleTarget
}

public class EffectTypeArchetype
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public EffectTypeCategory Category { get; set; }
    public bool HasAccessToAdvancedConditions { get; set; }
    public int DamagePenalty { get; set; }
    public int ConditionPenalty { get; set; }
    public bool RequiresHybridEffects { get; set; }
    
    public int CharacterArchetypesId { get; set; }
    public CharacterArchetypes CharacterArchetypes { get; set; } = null!;
}

public enum EffectTypeCategory
{
    DamageSpecialist,
    HybridSpecialist,
    CrowdControl
}

public class UniqueAbilityArchetype
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public UniqueAbilityCategory Category { get; set; }
    public int ExtraQuickActions { get; set; }
    public int ExtraPointPool { get; set; }
    public Dictionary<string, int> StatBonuses { get; set; } = new();
    
    public int CharacterArchetypesId { get; set; }
    public CharacterArchetypes CharacterArchetypes { get; set; } = null!;
}

public enum UniqueAbilityCategory
{
    VersatileMaster,
    Extraordinary,
    CutAbove
}

public class SpecialAttackArchetype
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public SpecialAttackCategory Category { get; set; }
    public int BasePoints { get; set; }
    public int MaxSpecialAttacks { get; set; }
    public float LimitPointMultiplier { get; set; }
    public bool CanTakeLimits { get; set; }
    public List<string> RequiredLimits { get; set; } = new();
    
    public int CharacterArchetypesId { get; set; }
    public CharacterArchetypes CharacterArchetypes { get; set; } = null!;
}

public enum SpecialAttackCategory
{
    Normal,
    Specialist,
    Paragon,
    OneTrick,
    Straightforward,
    SharedUses,
    DualNatured,
    Basic
}

public class UtilityArchetype
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public UtilityCategory Category { get; set; }
    public int BaseUtilityPool { get; set; }
    public bool CanPurchaseExpertise { get; set; }
    public float TierBonusMultiplier { get; set; }
    public List<string> Restrictions { get; set; } = new();
    
    public int CharacterArchetypesId { get; set; }
    public CharacterArchetypes CharacterArchetypes { get; set; } = null!;
}

public enum UtilityCategory
{
    Specialized,
    Practical,
    JackOfAllTrades
}
--------------------------------------------------

File: <WindowsPath.parents> models\Entities\CombatAttributes.cs
Content:
namespace VitalityBuilder.Api.Models.Entities;

public class CombatAttributes
{
    public int Id { get; set; }
    public int Focus { get; set; }
    public int Power { get; set; }
    public int Mobility { get; set; }
    public int Endurance { get; set; }

    public int CharacterId { get; set; }
    public Character Character { get; set; } = null!;
    public int Total { get; internal set; }
}


--------------------------------------------------

File: <WindowsPath.parents> models\Entities\Expertise.cs
Content:
namespace VitalityBuilder.Api.Models.Entities;
public class Expertise
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public string Category { get; set; } = string.Empty;
    public int Cost { get; set; }
    public string Description { get; set; } = string.Empty;

    public int CharacterId { get; set; }
    public Character Character { get; set; } = null!;
}
--------------------------------------------------

File: <WindowsPath.parents> models\Entities\SpecialAttack.cs
Content:
namespace VitalityBuilder.Api.Models.Entities;
public class SpecialAttack
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public string AttackType { get; set; } = string.Empty;
    public string EffectType { get; set; } = string.Empty;
    public List<string> Limits { get; set; } = new();
    public List<string> Upgrades { get; set; } = new();

    public int CharacterId { get; set; }
    public Character Character { get; set; } = null!;
}
--------------------------------------------------

File: <WindowsPath.parents> models\Entities\UniquePower.cs
Content:
namespace VitalityBuilder.Api.Models.Entities;
public class UniquePower
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public string Category { get; set; } = string.Empty;
    public int Cost { get; set; }
    public string Description { get; set; } = string.Empty;

    public int CharacterId { get; set; }
    public Character Character { get; set; } = null!;
}
--------------------------------------------------

File: <WindowsPath.parents> models\Entities\UtilityAttributes.cs
Content:
namespace VitalityBuilder.Api.Models.Entities;
public class UtilityAttributes
{
    public int Id { get; set; }
    public int Awareness { get; set; }
    public int Communication { get; set; }
    public int Intelligence { get; set; }

    public int CharacterId { get; set; }
    public Character Character { get; set; } = null!;

    
}
--------------------------------------------------
