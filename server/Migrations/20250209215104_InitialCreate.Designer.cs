// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VitalityBuilder.Api.Infrastructure;

#nullable disable

namespace VitalityBuilder.Api.Migrations
{
    [DbContext(typeof(VitalityBuilderContext))]
    [Migration("20250209215104_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.AttackTypeArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccuracyPenalty")
                        .HasColumnType("int");

                    b.Property<bool>("BypassesAccuracyChecks")
                        .HasColumnType("bit");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<int>("EffectPenalty")
                        .HasColumnType("int");

                    b.Property<bool>("HasFreeAOE")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("AttackTypeArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.EffectTypeArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<int>("ConditionPenalty")
                        .HasColumnType("int");

                    b.Property<int>("DamagePenalty")
                        .HasColumnType("int");

                    b.Property<bool>("HasAccessToAdvancedConditions")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresHybridEffects")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("EffectTypeArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.MovementArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<bool>("IgnoresDifficultTerrain")
                        .HasColumnType("bit");

                    b.Property<bool>("IgnoresOpportunityAttacks")
                        .HasColumnType("bit");

                    b.Property<bool>("IsImmuneToProne")
                        .HasColumnType("bit");

                    b.Property<float>("MovementMultiplier")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpeedBonusByTier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("MovementArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.SpecialAttackArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BasePoints")
                        .HasColumnType("int");

                    b.Property<bool>("CanTakeLimits")
                        .HasColumnType("bit");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<float>("LimitPointMultiplier")
                        .HasColumnType("real");

                    b.Property<int>("MaxSpecialAttacks")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("RequiredLimits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("SpecialAttackArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.UniqueAbilityArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<int>("ExtraPointPool")
                        .HasColumnType("int");

                    b.Property<int>("ExtraQuickActions")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatBonuses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("UniqueAbilityArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.UtilityArchetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseUtilityPool")
                        .HasColumnType("int");

                    b.Property<bool>("CanPurchaseExpertise")
                        .HasColumnType("bit");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CharacterArchetypesId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Restrictions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TierBonusMultiplier")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CharacterArchetypesId")
                        .IsUnique();

                    b.ToTable("UtilityArchetype");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MainPointPool")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecialAttacksPointPool")
                        .HasColumnType("int");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.Property<int>("UtilityPointPool")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.CombatAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Endurance")
                        .HasColumnType("int");

                    b.Property<int>("Focus")
                        .HasColumnType("int");

                    b.Property<int>("Mobility")
                        .HasColumnType("int");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("CombatAttributes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Expertise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Expertise");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.SpecialAttack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttackType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("EffectType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Limits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Upgrades")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("SpecialAttacks");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.UniquePower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("UniquePowers");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.UtilityAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Awareness")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Communication")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("UtilityAttributes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.AttackTypeArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("AttackTypeArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.AttackTypeArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.EffectTypeArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("EffectTypeArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.EffectTypeArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.MovementArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("MovementArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.MovementArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.SpecialAttackArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("SpecialAttackArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.SpecialAttackArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.UniqueAbilityArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("UniqueAbilityArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.UniqueAbilityArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.UtilityArchetype", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", "CharacterArchetypes")
                        .WithOne("UtilityArchetype")
                        .HasForeignKey("VitalityBuilder.Api.Models.Archetypes.UtilityArchetype", "CharacterArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterArchetypes");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.CombatAttributes", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Character", "Character")
                        .WithOne("CombatAttributes")
                        .HasForeignKey("VitalityBuilder.Api.Models.CombatAttributes", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Expertise", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Character", "Character")
                        .WithMany("Expertise")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.SpecialAttack", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Character", "Character")
                        .WithMany("SpecialAttacks")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.UniquePower", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Character", "Character")
                        .WithMany("UniquePowers")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.UtilityAttributes", b =>
                {
                    b.HasOne("VitalityBuilder.Api.Models.Character", "Character")
                        .WithOne("UtilityAttributes")
                        .HasForeignKey("VitalityBuilder.Api.Models.UtilityAttributes", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Archetypes.CharacterArchetypes", b =>
                {
                    b.Navigation("AttackTypeArchetype")
                        .IsRequired();

                    b.Navigation("EffectTypeArchetype")
                        .IsRequired();

                    b.Navigation("MovementArchetype")
                        .IsRequired();

                    b.Navigation("SpecialAttackArchetype")
                        .IsRequired();

                    b.Navigation("UniqueAbilityArchetype")
                        .IsRequired();

                    b.Navigation("UtilityArchetype")
                        .IsRequired();
                });

            modelBuilder.Entity("VitalityBuilder.Api.Models.Character", b =>
                {
                    b.Navigation("CombatAttributes");

                    b.Navigation("Expertise");

                    b.Navigation("SpecialAttacks");

                    b.Navigation("UniquePowers");

                    b.Navigation("UtilityAttributes");
                });
#pragma warning restore 612, 618
        }
    }
}
